"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _StarIcon = _interopRequireDefault(require("./StarIcon"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const defaultColor = "#fdd835";
const defaultAnimationConfig = {
  easing: _reactNative.Easing.elastic(2),
  duration: 300,
  scale: 1.2,
  delay: 300
};

const StarRating = ({
  rating,
  maxStars = 5,
  starSize = 32,
  onChange,
  color = defaultColor,
  emptyColor = color,
  enableHalfStar = true,
  enableSwiping = true,
  animationConfig = defaultAnimationConfig,
  style,
  starStyle,
  testID
}) => {
  const width = (0, _react.useRef)();
  const ref = (0, _react.useRef)(null);
  const [isInteracting, setInteracting] = (0, _react.useState)(false);

  const handleInteraction = x => {
    if (width.current) {
      const newRating = Math.max(0, Math.min(Math.round(x / width.current * maxStars * 2 + 0.2) / 2, maxStars));
      onChange(enableHalfStar ? newRating : Math.ceil(newRating));
    }
  };

  const [panResponder] = (0, _react.useState)(() => _reactNative.PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onStartShouldSetPanResponderCapture: () => true,
    onMoveShouldSetPanResponder: () => true,
    onMoveShouldSetPanResponderCapture: () => true,
    onPanResponderMove: e => {
      if (enableSwiping) {
        handleInteraction(e.nativeEvent.locationX);
      }
    },
    onPanResponderStart: e => {
      handleInteraction(e.nativeEvent.locationX);
      setInteracting(true);
    },
    onPanResponderEnd: () => {
      setTimeout(() => {
        setInteracting(false);
      }, animationConfig.delay || defaultAnimationConfig.delay);
    }
  }));
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    ref: ref,
    style: [styles.starRating, style]
  }, panResponder.panHandlers, {
    onLayout: () => {
      if (ref.current) {
        ref.current.measure((_x, _y, w, _h) => width.current = w);
      }
    },
    testID: testID
  }), (0, _utils.getStars)(rating, maxStars).map((starType, i) => {
    return /*#__PURE__*/_react.default.createElement(AnimatedIcon, {
      key: i,
      active: isInteracting && rating - i >= 0.5,
      animationConfig: animationConfig,
      style: starStyle
    }, /*#__PURE__*/_react.default.createElement(_StarIcon.default, {
      type: starType,
      size: starSize,
      color: starType === "empty" ? emptyColor : color
    }));
  }));
};

const AnimatedIcon = ({
  active,
  animationConfig,
  children,
  style
}) => {
  const {
    scale = defaultAnimationConfig.scale,
    easing = defaultAnimationConfig.easing,
    duration = defaultAnimationConfig.duration
  } = animationConfig;
  const animatedSize = (0, _react.useRef)(new _reactNative.Animated.Value(active ? scale : 1));
  (0, _react.useEffect)(() => {
    const animation = _reactNative.Animated.timing(animatedSize.current, {
      toValue: active ? scale : 1,
      useNativeDriver: true,
      easing,
      duration
    });

    animation.start();
    return animation.stop;
  }, [active, scale, easing, duration]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    pointerEvents: "none",
    style: [styles.star, style, {
      transform: [{
        scale: animatedSize.current
      }]
    }]
  }, children);
};

const styles = _reactNative.StyleSheet.create({
  starRating: {
    flexDirection: "row",
    alignSelf: "flex-start"
  },
  star: {
    marginHorizontal: 5
  }
});

var _default = StarRating;
exports.default = _default;
//# sourceMappingURL=StarRating.js.map