{"version":3,"sources":["StarRating.tsx"],"names":["defaultColor","defaultAnimationConfig","easing","Easing","elastic","duration","scale","delay","StarRating","rating","maxStars","starSize","onChange","color","emptyColor","enableHalfStar","enableSwiping","animationConfig","style","starStyle","testID","width","ref","isInteracting","setInteracting","handleInteraction","x","current","newRating","Math","max","min","round","ceil","panResponder","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","e","nativeEvent","locationX","onPanResponderStart","onPanResponderEnd","setTimeout","styles","starRating","panHandlers","measure","_x","_y","w","_h","map","starType","i","AnimatedIcon","active","children","animatedSize","Animated","Value","animation","timing","toValue","useNativeDriver","start","stop","star","transform","StyleSheet","flexDirection","alignSelf","marginHorizontal"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;AACA;;;;;;;;;;AAyBA,MAAMA,YAAY,GAAG,SAArB;AACA,MAAMC,sBAAiD,GAAG;AACtDC,EAAAA,MAAM,EAAEC,oBAAOC,OAAP,CAAe,CAAf,CAD8C;AAEtDC,EAAAA,QAAQ,EAAE,GAF4C;AAGtDC,EAAAA,KAAK,EAAE,GAH+C;AAItDC,EAAAA,KAAK,EAAE;AAJ+C,CAA1D;;AAOA,MAAMC,UAAqC,GAAG,CAAC;AAC3CC,EAAAA,MAD2C;AAE3CC,EAAAA,QAAQ,GAAG,CAFgC;AAG3CC,EAAAA,QAAQ,GAAG,EAHgC;AAI3CC,EAAAA,QAJ2C;AAK3CC,EAAAA,KAAK,GAAGb,YALmC;AAM3Cc,EAAAA,UAAU,GAAGD,KAN8B;AAO3CE,EAAAA,cAAc,GAAG,IAP0B;AAQ3CC,EAAAA,aAAa,GAAG,IAR2B;AAS3CC,EAAAA,eAAe,GAAGhB,sBATyB;AAU3CiB,EAAAA,KAV2C;AAW3CC,EAAAA,SAX2C;AAY3CC,EAAAA;AAZ2C,CAAD,KAaxC;AACF,QAAMC,KAAK,GAAG,oBAAd;AACA,QAAMC,GAAG,GAAG,mBAAa,IAAb,CAAZ;AACA,QAAM,CAACC,aAAD,EAAgBC,cAAhB,IAAkC,qBAAS,KAAT,CAAxC;;AAEA,QAAMC,iBAAiB,GAAIC,CAAD,IAAe;AACrC,QAAIL,KAAK,CAACM,OAAV,EAAmB;AACf,YAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CACd,CADc,EAEdD,IAAI,CAACE,GAAL,CACIF,IAAI,CAACG,KAAL,CAAYN,CAAC,GAAGL,KAAK,CAACM,OAAX,GAAsBjB,QAAtB,GAAiC,CAAjC,GAAqC,GAAhD,IAAuD,CAD3D,EAEIA,QAFJ,CAFc,CAAlB;AAOAE,MAAAA,QAAQ,CAACG,cAAc,GAAGa,SAAH,GAAeC,IAAI,CAACI,IAAL,CAAUL,SAAV,CAA9B,CAAR;AACH;AACJ,GAXD;;AAaA,QAAM,CAACM,YAAD,IAAiB,qBAAS,MAC5BC,0BAAaC,MAAb,CAAoB;AAChBC,IAAAA,4BAA4B,EAAE,MAAM,IADpB;AAEhBC,IAAAA,mCAAmC,EAAE,MAAM,IAF3B;AAGhBC,IAAAA,2BAA2B,EAAE,MAAM,IAHnB;AAIhBC,IAAAA,kCAAkC,EAAE,MAAM,IAJ1B;AAKhBC,IAAAA,kBAAkB,EAAEC,CAAC,IAAI;AACrB,UAAI1B,aAAJ,EAAmB;AACfS,QAAAA,iBAAiB,CAACiB,CAAC,CAACC,WAAF,CAAcC,SAAf,CAAjB;AACH;AACJ,KATe;AAUhBC,IAAAA,mBAAmB,EAAEH,CAAC,IAAI;AACtBjB,MAAAA,iBAAiB,CAACiB,CAAC,CAACC,WAAF,CAAcC,SAAf,CAAjB;AACApB,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAbe;AAchBsB,IAAAA,iBAAiB,EAAE,MAAM;AACrBC,MAAAA,UAAU,CAAC,MAAM;AACbvB,QAAAA,cAAc,CAAC,KAAD,CAAd;AACH,OAFS,EAEPP,eAAe,CAACV,KAAhB,IAAyBN,sBAAsB,CAACM,KAFzC,CAAV;AAGH;AAlBe,GAApB,CADmB,CAAvB;AAuBA,sBACI,6BAAC,iBAAD;AACI,IAAA,GAAG,EAAEe,GADT;AAEI,IAAA,KAAK,EAAE,CAAC0B,MAAM,CAACC,UAAR,EAAoB/B,KAApB;AAFX,KAGQgB,YAAY,CAACgB,WAHrB;AAII,IAAA,QAAQ,EAAE,MAAM;AACZ,UAAI5B,GAAG,CAACK,OAAR,EAAiB;AACbL,QAAAA,GAAG,CAACK,OAAJ,CAAYwB,OAAZ,CAAoB,CAACC,EAAD,EAAKC,EAAL,EAASC,CAAT,EAAYC,EAAZ,KAAoBlC,KAAK,CAACM,OAAN,GAAgB2B,CAAxD;AACH;AACJ,KARL;AASI,IAAA,MAAM,EAAElC;AATZ,MAUK,qBAASX,MAAT,EAAiBC,QAAjB,EAA2B8C,GAA3B,CAA+B,CAACC,QAAD,EAAWC,CAAX,KAAiB;AAC7C,wBACI,6BAAC,YAAD;AACI,MAAA,GAAG,EAAEA,CADT;AAEI,MAAA,MAAM,EAAEnC,aAAa,IAAId,MAAM,GAAGiD,CAAT,IAAc,GAF3C;AAGI,MAAA,eAAe,EAAEzC,eAHrB;AAII,MAAA,KAAK,EAAEE;AAJX,oBAKI,6BAAC,iBAAD;AACI,MAAA,IAAI,EAAEsC,QADV;AAEI,MAAA,IAAI,EAAE9C,QAFV;AAGI,MAAA,KAAK,EAAE8C,QAAQ,KAAK,OAAb,GAAuB3C,UAAvB,GAAoCD;AAH/C,MALJ,CADJ;AAaH,GAdA,CAVL,CADJ;AA4BH,CAlFD;;AA2FA,MAAM8C,YAAyC,GAAG,CAAC;AAC/CC,EAAAA,MAD+C;AAE/C3C,EAAAA,eAF+C;AAG/C4C,EAAAA,QAH+C;AAI/C3C,EAAAA;AAJ+C,CAAD,KAK5C;AACF,QAAM;AACFZ,IAAAA,KAAK,GAAGL,sBAAsB,CAACK,KAD7B;AAEFJ,IAAAA,MAAM,GAAGD,sBAAsB,CAACC,MAF9B;AAGFG,IAAAA,QAAQ,GAAGJ,sBAAsB,CAACI;AAHhC,MAIFY,eAJJ;AAMA,QAAM6C,YAAY,GAAG,mBAAO,IAAIC,sBAASC,KAAb,CAAmBJ,MAAM,GAAGtD,KAAH,GAAW,CAApC,CAAP,CAArB;AAEA,wBAAU,MAAM;AACZ,UAAM2D,SAAS,GAAGF,sBAASG,MAAT,CAAgBJ,YAAY,CAACnC,OAA7B,EAAsC;AACpDwC,MAAAA,OAAO,EAAEP,MAAM,GAAGtD,KAAH,GAAW,CAD0B;AAEpD8D,MAAAA,eAAe,EAAE,IAFmC;AAGpDlE,MAAAA,MAHoD;AAIpDG,MAAAA;AAJoD,KAAtC,CAAlB;;AAOA4D,IAAAA,SAAS,CAACI,KAAV;AACA,WAAOJ,SAAS,CAACK,IAAjB;AACH,GAVD,EAUG,CAACV,MAAD,EAAStD,KAAT,EAAgBJ,MAAhB,EAAwBG,QAAxB,CAVH;AAYA,sBACI,6BAAC,qBAAD,CAAU,IAAV;AACI,IAAA,aAAa,EAAC,MADlB;AAEI,IAAA,KAAK,EAAE,CACH2C,MAAM,CAACuB,IADJ,EAEHrD,KAFG,EAGH;AACIsD,MAAAA,SAAS,EAAE,CACP;AACIlE,QAAAA,KAAK,EAAEwD,YAAY,CAACnC;AADxB,OADO;AADf,KAHG;AAFX,KAaKkC,QAbL,CADJ;AAiBH,CA3CD;;AA6CA,MAAMb,MAAM,GAAGyB,wBAAWrC,MAAX,CAAkB;AAC7Ba,EAAAA,UAAU,EAAE;AACRyB,IAAAA,aAAa,EAAE,KADP;AAERC,IAAAA,SAAS,EAAE;AAFH,GADiB;AAK7BJ,EAAAA,IAAI,EAAE;AACFK,IAAAA,gBAAgB,EAAE;AADhB;AALuB,CAAlB,CAAf;;eAUepE,U","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport {\n    PanResponder,\n    StyleSheet,\n    View,\n    StyleProp,\n    ViewStyle,\n    Animated,\n    Easing,\n} from \"react-native\";\nimport StarIcon from \"./StarIcon\";\nimport { getStars } from \"./utils\";\n\ntype AnimationConfig = {\n    easing?: (value: number) => number;\n    duration?: number;\n    delay?: number;\n    scale?: number;\n};\n\ntype StarRatingProps = {\n    rating: number;\n    onChange: (rating: number) => void;\n    minRating?: number;\n    color?: string;\n    emptyColor?: string;\n    maxStars?: number;\n    starSize?: number;\n    enableHalfStar?: boolean;\n    enableSwiping?: boolean;\n    style?: StyleProp<ViewStyle>;\n    starStyle?: StyleProp<ViewStyle>;\n    animationConfig?: AnimationConfig;\n    testID?: string;\n};\n\nconst defaultColor = \"#fdd835\";\nconst defaultAnimationConfig: Required<AnimationConfig> = {\n    easing: Easing.elastic(2),\n    duration: 300,\n    scale: 1.2,\n    delay: 300,\n};\n\nconst StarRating: React.FC<StarRatingProps> = ({\n    rating,\n    maxStars = 5,\n    starSize = 32,\n    onChange,\n    color = defaultColor,\n    emptyColor = color,\n    enableHalfStar = true,\n    enableSwiping = true,\n    animationConfig = defaultAnimationConfig,\n    style,\n    starStyle,\n    testID,\n}) => {\n    const width = useRef<number>();\n    const ref = useRef<View>(null);\n    const [isInteracting, setInteracting] = useState(false);\n\n    const handleInteraction = (x: number) => {\n        if (width.current) {\n            const newRating = Math.max(\n                0,\n                Math.min(\n                    Math.round((x / width.current) * maxStars * 2 + 0.2) / 2,\n                    maxStars\n                )\n            );\n            onChange(enableHalfStar ? newRating : Math.ceil(newRating));\n        }\n    };\n\n    const [panResponder] = useState(() =>\n        PanResponder.create({\n            onStartShouldSetPanResponder: () => true,\n            onStartShouldSetPanResponderCapture: () => true,\n            onMoveShouldSetPanResponder: () => true,\n            onMoveShouldSetPanResponderCapture: () => true,\n            onPanResponderMove: e => {\n                if (enableSwiping) {\n                    handleInteraction(e.nativeEvent.locationX);\n                }\n            },\n            onPanResponderStart: e => {\n                handleInteraction(e.nativeEvent.locationX);\n                setInteracting(true);\n            },\n            onPanResponderEnd: () => {\n                setTimeout(() => {\n                    setInteracting(false);\n                }, animationConfig.delay || defaultAnimationConfig.delay);\n            },\n        })\n    );\n\n    return (\n        <View\n            ref={ref}\n            style={[styles.starRating, style]}\n            {...panResponder.panHandlers}\n            onLayout={() => {\n                if (ref.current) {\n                    ref.current.measure((_x, _y, w, _h) => (width.current = w));\n                }\n            }}\n            testID={testID}>\n            {getStars(rating, maxStars).map((starType, i) => {\n                return (\n                    <AnimatedIcon\n                        key={i}\n                        active={isInteracting && rating - i >= 0.5}\n                        animationConfig={animationConfig}\n                        style={starStyle}>\n                        <StarIcon\n                            type={starType}\n                            size={starSize}\n                            color={starType === \"empty\" ? emptyColor : color}\n                        />\n                    </AnimatedIcon>\n                );\n            })}\n        </View>\n    );\n};\n\ntype AnimatedIconProps = {\n    active: boolean;\n    children: React.ReactElement;\n    animationConfig: AnimationConfig;\n    style?: StyleProp<ViewStyle>;\n};\n\nconst AnimatedIcon: React.FC<AnimatedIconProps> = ({\n    active,\n    animationConfig,\n    children,\n    style,\n}) => {\n    const {\n        scale = defaultAnimationConfig.scale,\n        easing = defaultAnimationConfig.easing,\n        duration = defaultAnimationConfig.duration,\n    } = animationConfig;\n\n    const animatedSize = useRef(new Animated.Value(active ? scale : 1));\n\n    useEffect(() => {\n        const animation = Animated.timing(animatedSize.current, {\n            toValue: active ? scale : 1,\n            useNativeDriver: true,\n            easing,\n            duration,\n        });\n\n        animation.start();\n        return animation.stop;\n    }, [active, scale, easing, duration]);\n\n    return (\n        <Animated.View\n            pointerEvents=\"none\"\n            style={[\n                styles.star,\n                style,\n                {\n                    transform: [\n                        {\n                            scale: animatedSize.current,\n                        },\n                    ],\n                },\n            ]}>\n            {children}\n        </Animated.View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    starRating: {\n        flexDirection: \"row\",\n        alignSelf: \"flex-start\",\n    },\n    star: {\n        marginHorizontal: 5,\n    },\n});\n\nexport default StarRating;\n"]}