{"version":3,"sources":["StarRating.tsx"],"names":["React","useRef","useEffect","useState","PanResponder","StyleSheet","View","Animated","Easing","StarIcon","getStars","defaultColor","defaultAnimationConfig","easing","elastic","duration","scale","delay","StarRating","rating","maxStars","starSize","onChange","color","emptyColor","enableHalfStar","enableSwiping","animationConfig","style","starStyle","testID","width","ref","isInteracting","setInteracting","handleInteraction","x","current","newRating","Math","max","min","round","ceil","panResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","e","nativeEvent","locationX","onPanResponderStart","onPanResponderEnd","setTimeout","styles","starRating","panHandlers","measure","_x","_y","w","_h","map","starType","i","AnimatedIcon","active","children","animatedSize","Value","animation","timing","toValue","useNativeDriver","start","stop","star","transform","flexDirection","alignSelf","marginHorizontal"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport {\n    PanResponder,\n    StyleSheet,\n    View,\n    StyleProp,\n    ViewStyle,\n    Animated,\n    Easing,\n} from \"react-native\";\nimport StarIcon from \"./StarIcon\";\nimport { getStars } from \"./utils\";\n\ntype AnimationConfig = {\n    easing?: (value: number) => number;\n    duration?: number;\n    delay?: number;\n    scale?: number;\n};\n\ntype StarRatingProps = {\n    rating: number;\n    onChange: (rating: number) => void;\n    minRating?: number;\n    color?: string;\n    emptyColor?: string;\n    maxStars?: number;\n    starSize?: number;\n    enableHalfStar?: boolean;\n    enableSwiping?: boolean;\n    style?: StyleProp<ViewStyle>;\n    starStyle?: StyleProp<ViewStyle>;\n    animationConfig?: AnimationConfig;\n    testID?: string;\n};\n\nconst defaultColor = \"#fdd835\";\nconst defaultAnimationConfig: Required<AnimationConfig> = {\n    easing: Easing.elastic(2),\n    duration: 300,\n    scale: 1.2,\n    delay: 300,\n};\n\nconst StarRating: React.FC<StarRatingProps> = ({\n    rating,\n    maxStars = 5,\n    starSize = 32,\n    onChange,\n    color = defaultColor,\n    emptyColor = color,\n    enableHalfStar = true,\n    enableSwiping = true,\n    animationConfig = defaultAnimationConfig,\n    style,\n    starStyle,\n    testID,\n}) => {\n    const width = useRef<number>();\n    const ref = useRef<View>(null);\n    const [isInteracting, setInteracting] = useState(false);\n\n    const handleInteraction = (x: number) => {\n        if (width.current) {\n            const newRating = Math.max(\n                0,\n                Math.min(\n                    Math.round((x / width.current) * maxStars * 2 + 0.2) / 2,\n                    maxStars\n                )\n            );\n            onChange(enableHalfStar ? newRating : Math.ceil(newRating));\n        }\n    };\n\n    const [panResponder] = useState(() =>\n        PanResponder.create({\n            onStartShouldSetPanResponder: () => true,\n            onStartShouldSetPanResponderCapture: () => true,\n            onMoveShouldSetPanResponder: () => true,\n            onMoveShouldSetPanResponderCapture: () => true,\n            onPanResponderMove: e => {\n                if (enableSwiping) {\n                    handleInteraction(e.nativeEvent.locationX);\n                }\n            },\n            onPanResponderStart: e => {\n                handleInteraction(e.nativeEvent.locationX);\n                setInteracting(true);\n            },\n            onPanResponderEnd: () => {\n                setTimeout(() => {\n                    setInteracting(false);\n                }, animationConfig.delay || defaultAnimationConfig.delay);\n            },\n        })\n    );\n\n    return (\n        <View\n            ref={ref}\n            style={[styles.starRating, style]}\n            {...panResponder.panHandlers}\n            onLayout={() => {\n                if (ref.current) {\n                    ref.current.measure((_x, _y, w, _h) => (width.current = w));\n                }\n            }}\n            testID={testID}>\n            {getStars(rating, maxStars).map((starType, i) => {\n                return (\n                    <AnimatedIcon\n                        key={i}\n                        active={isInteracting && rating - i >= 0.5}\n                        animationConfig={animationConfig}\n                        style={starStyle}>\n                        <StarIcon\n                            type={starType}\n                            size={starSize}\n                            color={starType === \"empty\" ? emptyColor : color}\n                        />\n                    </AnimatedIcon>\n                );\n            })}\n        </View>\n    );\n};\n\ntype AnimatedIconProps = {\n    active: boolean;\n    children: React.ReactElement;\n    animationConfig: AnimationConfig;\n    style?: StyleProp<ViewStyle>;\n};\n\nconst AnimatedIcon: React.FC<AnimatedIconProps> = ({\n    active,\n    animationConfig,\n    children,\n    style,\n}) => {\n    const {\n        scale = defaultAnimationConfig.scale,\n        easing = defaultAnimationConfig.easing,\n        duration = defaultAnimationConfig.duration,\n    } = animationConfig;\n\n    const animatedSize = useRef(new Animated.Value(active ? scale : 1));\n\n    useEffect(() => {\n        const animation = Animated.timing(animatedSize.current, {\n            toValue: active ? scale : 1,\n            useNativeDriver: true,\n            easing,\n            duration,\n        });\n\n        animation.start();\n        return animation.stop;\n    }, [active, scale, easing, duration]);\n\n    return (\n        <Animated.View\n            pointerEvents=\"none\"\n            style={[\n                styles.star,\n                style,\n                {\n                    transform: [\n                        {\n                            scale: animatedSize.current,\n                        },\n                    ],\n                },\n            ]}>\n            {children}\n        </Animated.View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    starRating: {\n        flexDirection: \"row\",\n        alignSelf: \"flex-start\",\n    },\n    star: {\n        marginHorizontal: 5,\n    },\n});\n\nexport default StarRating;\n"]}