"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const call_all_1 = require("./call-all");
const merge_refs_1 = require("./merge-refs");
function useAutoFocusInputs({ initialRerender = true, } = {}) {
    const inputRefsRef = React.useRef([]);
    const inputIndexRef = React.useRef(-1);
    const [rerendered, setRerendered] = React.useState(false);
    React.useEffect(() => {
        // reset input index on rerender
        inputIndexRef.current = -1;
    });
    React.useEffect(() => {
        if (!rerendered && initialRerender) {
            setRerendered(true);
        }
    }, [initialRerender, rerendered]);
    return React.useCallback((_a) => {
        var { ref, onSubmitEditing } = _a, props = __rest(_a, ["ref", "onSubmitEditing"]);
        inputIndexRef.current += 1;
        const currentInputIndex = inputIndexRef.current;
        let inputRef = inputRefsRef.current[currentInputIndex];
        if (!inputRef) {
            inputRef = React.createRef();
            inputRefsRef.current.push(inputRef);
        }
        const nextInput = inputRefsRef.current[currentInputIndex + 1];
        return Object.assign({ ref: merge_refs_1.default(ref, inputRef), returnKeyType: nextInput ? 'next' : 'done', blurOnSubmit: !nextInput, onSubmitEditing: call_all_1.default(nextInput
                ? // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    (_e) => {
                        const nextInputRef = nextInput === null || nextInput === void 0 ? void 0 : nextInput.current;
                        if (nextInputRef) {
                            nextInputRef.focus();
                        }
                    }
                : undefined, onSubmitEditing) }, props);
    }, []);
}
exports.default = useAutoFocusInputs;
