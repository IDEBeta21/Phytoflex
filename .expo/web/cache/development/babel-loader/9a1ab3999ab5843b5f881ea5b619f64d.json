{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar SceneView = function (_React$Component) {\n  _inherits(SceneView, _React$Component);\n\n  var _super = _createSuper(SceneView);\n\n  function SceneView() {\n    var _this;\n\n    _classCallCheck(this, SceneView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: Math.abs(_this.props.navigationState.index - _this.props.index) > _this.props.lazyPreloadDistance\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"timerHandler\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"unsubscribe\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnter\", function (value) {\n      var index = _this.props.index;\n\n      if (value === index) {\n        _this.setState(function (prevState) {\n          if (prevState.loading) {\n            return {\n              loading: false\n            };\n          }\n\n          return null;\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(SceneView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.lazy) {\n        this.unsubscribe = this.props.addEnterListener(this.handleEnter);\n      } else if (this.state.loading) {\n        this.timerHandler = setTimeout(function () {\n          return _this2.setState({\n            loading: false\n          });\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.lazy !== prevProps.lazy || this.state.loading !== prevState.loading) {\n        if (this.props.lazy && this.state.loading) {\n          var _this$unsubscribe;\n\n          (_this$unsubscribe = this.unsubscribe) === null || _this$unsubscribe === void 0 ? void 0 : _this$unsubscribe.call(this);\n          this.unsubscribe = this.props.addEnterListener(this.handleEnter);\n        } else {\n          var _this$unsubscribe2;\n\n          (_this$unsubscribe2 = this.unsubscribe) === null || _this$unsubscribe2 === void 0 ? void 0 : _this$unsubscribe2.call(this);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$unsubscribe3;\n\n      (_this$unsubscribe3 = this.unsubscribe) === null || _this$unsubscribe3 === void 0 ? void 0 : _this$unsubscribe3.call(this);\n\n      if (this.timerHandler) {\n        clearTimeout(this.timerHandler);\n        this.timerHandler = undefined;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          navigationState = _this$props.navigationState,\n          index = _this$props.index,\n          layout = _this$props.layout,\n          style = _this$props.style;\n      var loading = this.state.loading;\n      var focused = navigationState.index === index;\n      return React.createElement(View, {\n        accessibilityElementsHidden: !focused,\n        importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n        style: [styles.route, layout.width ? {\n          width: layout.width\n        } : focused ? StyleSheet.absoluteFill : null, style]\n      }, focused || layout.width ? this.props.children({\n        loading: loading\n      }) : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.loading && Math.abs(props.navigationState.index - props.index) <= props.lazyPreloadDistance) {\n        return {\n          loading: false\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return SceneView;\n}(React.Component);\n\nexport { SceneView as default };\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["SceneView.tsx"],"names":["React","getDerivedStateFromProps","state","Math","props","loading","lazyPreloadDistance","componentDidMount","setTimeout","componentDidUpdate","prevProps","prevState","componentWillUnmount","clearTimeout","value","index","render","style","focused","navigationState","styles","layout","width","StyleSheet","route","flex","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;IAuBe,S;;;;;AAGb,uBAAA;AAAA;;AAAA;;AAAA,sCAAA,IAAA;AAAA,MAAA,IAAA;AAAA;;AAAA,oDAAA,IAAA;;AAAA,IAAA,eAAA,gCAAA,OAAA,EAcQ;AACNK,MAAAA,OAAO,EACLF,IAAI,CAAJA,GAAAA,CAAS,MAAA,KAAA,CAAA,eAAA,CAAA,KAAA,GAAmC,MAAA,KAAA,CAA5CA,KAAAA,IACA,MAAA,KAAA,CAAWG;AAHP,KAdR,CAAA;;AAAA,IAAA,eAAA,gCAAA,cAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,aAAA,EAAA,IAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,aAAA,EA8DuBQ,UAAAA,KAAD,EAAmB;AACvC,UAAQC,KAAR,GAAkB,MADqB,KACvC,CAAQA,KAAR;;AAGA,UAAID,KAAK,KAAT,KAAA,EAAqB;AACnB,cAAA,QAAA,CAAeH,UAAAA,SAAD,EAAe;AAC3B,cAAIA,SAAS,CAAb,OAAA,EAAuB;AACrB,mBAAO;AAAEN,cAAAA,OAAO,EAAE;AAAX,aAAP;AACD;;AAED,iBAAA,IAAA;AALF,SAAA;AAOD;AA1EH,KAAA,CAAA;;AAAA;AAAA;;;;WAoBAE,6BAAoB;AAAA;;AAClB,UAAI,KAAA,KAAA,CAAJ,IAAA,EAAqB;AAEnB,aAAA,WAAA,GAAmB,KAAA,KAAA,CAAA,gBAAA,CAA4B,KAA/C,WAAmB,CAAnB;AAFF,OAAA,MAGO,IAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AAG7B,aAAA,YAAA,GAAoBC,UAAU,CAC5B;AAAA,iBAAM,MAAA,CAAA,QAAA,CAAc;AAAEH,YAAAA,OAAO,EAAE;AAAX,WAAd,CAAN;AAAA,SAD4B,EAA9B,CAA8B,CAA9B;AAID;AACF;;;WAEDI,4BAAkB,SAAlBA,EAAkB,SAAlBA,EAA0D;AACxD,UACE,KAAA,KAAA,CAAA,IAAA,KAAoBC,SAAS,CAA7B,IAAA,IACA,KAAA,KAAA,CAAA,OAAA,KAAuBC,SAAS,CAFlC,OAAA,EAGE;AAEA,YAAI,KAAA,KAAA,CAAA,IAAA,IAAmB,KAAA,KAAA,CAAvB,OAAA,EAA2C;AAAA,cAAA,iBAAA;;AACzC,WAAA,iBAAA,GAAA,KAAA,WAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA,eAAA,WAAA,GAAmB,KAAA,KAAA,CAAA,gBAAA,CAA4B,KAA/C,WAAmB,CAAnB;AAFF,SAAA,MAGO;AAAA,cAAA,kBAAA;;AACL,WAAA,kBAAA,GAAA,KAAA,WAAA,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACD;AACF;AACF;;;WAEDC,gCAAuB;AAAA,UAAA,kBAAA;;AACrB,OAAA,kBAAA,GAAA,KAAA,WAAA,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,CAAA;;AAEA,UAAI,KAAJ,YAAA,EAAuB;AACrBC,QAAAA,YAAY,CAAC,KAAbA,YAAY,CAAZA;AACA,aAAA,YAAA,GAAA,SAAA;AACD;AACF;;;WAqBDG,kBAAS;AACP,wBAAkD,KAAlD,KAAA;AAAA,UAAM,eAAN,eAAM,eAAN;AAAA,UAAM,KAAN,eAAM,KAAN;AAAA,UAAM,MAAN,eAAM,MAAN;AAAA,UAAwCC,KAAxC,eAAwCA,KAAxC;AACA,UAAQZ,OAAR,GAAoB,KAApB,KAAA,CAAQA,OAAR;AAEA,UAAMa,OAAO,GAAGC,eAAe,CAAfA,KAAAA,KAAhB,KAAA;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,2BAA2B,EAAE,CAD/B,OAAA;AAEE,QAAA,yBAAyB,EAAED,OAAO,GAAA,MAAA,GAFpC,qBAAA;AAGE,QAAA,KAAK,EAAE,CACLE,MAAM,CADD,KAAA,EAILC,MAAM,CAANA,KAAAA,GACI;AAAEC,UAAAA,KAAK,EAAED,MAAM,CAACC;AAAhB,SADJD,GAEIH,OAAO,GACPK,UAAU,CADH,YAAA,GANN,IAAA,EAAA,KAAA;AAHT,OAAA,EAmBIL,OAAO,IAAIG,MAAM,CAAjBH,KAAAA,GAA0B,KAAA,KAAA,CAAA,QAAA,CAAoB;AAAEb,QAAAA,OAAAA,EAAAA;AAAF,OAApB,CAA1Ba,GApBN,IACE,CADF;AAwBD;;;WA1GMjB,kCAAwB,KAAxBA,EAAwB,KAAxBA,EAA4D;AACjE,UACEC,KAAK,CAALA,OAAAA,IACAC,IAAI,CAAJA,GAAAA,CAASC,KAAK,CAALA,eAAAA,CAAAA,KAAAA,GAA8BA,KAAK,CAA5CD,KAAAA,KACEC,KAAK,CAHT,mBAAA,EAIE;AAEA,eAAO;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAP;AACD;;AAED,aAAA,IAAA;AACD;;;;EAfqDL,KAAK,CAA9C,S;;SAAA,S;AAiHf,IAAMoB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BI,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EADC,CAAA;AAELC,IAAAA,QAAQ,EAAE;AAFL;AADwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport type {\n  SceneRendererProps,\n  EventEmitterProps,\n  NavigationState,\n  Route,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\ntype State = {\n  loading: boolean;\n};\n\nexport default class SceneView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static getDerivedStateFromProps(props: Props<Route>, state: State) {\n    if (\n      state.loading &&\n      Math.abs(props.navigationState.index - props.index) <=\n        props.lazyPreloadDistance\n    ) {\n      // Always render the route when it becomes focused\n      return { loading: false };\n    }\n\n    return null;\n  }\n\n  state = {\n    loading:\n      Math.abs(this.props.navigationState.index - this.props.index) >\n      this.props.lazyPreloadDistance,\n  };\n\n  componentDidMount() {\n    if (this.props.lazy) {\n      // If lazy mode is enabled, listen to when we enter screens\n      this.unsubscribe = this.props.addEnterListener(this.handleEnter);\n    } else if (this.state.loading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      this.timerHandler = setTimeout(\n        () => this.setState({ loading: false }),\n        0\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    if (\n      this.props.lazy !== prevProps.lazy ||\n      this.state.loading !== prevState.loading\n    ) {\n      // We only need the listener if the tab hasn't loaded yet and lazy is enabled\n      if (this.props.lazy && this.state.loading) {\n        this.unsubscribe?.();\n        this.unsubscribe = this.props.addEnterListener(this.handleEnter);\n      } else {\n        this.unsubscribe?.();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe?.();\n\n    if (this.timerHandler) {\n      clearTimeout(this.timerHandler);\n      this.timerHandler = undefined;\n    }\n  }\n\n  private timerHandler: NodeJS.Timeout | undefined;\n\n  private unsubscribe: (() => void) | null = null;\n\n  private handleEnter = (value: number) => {\n    const { index } = this.props;\n\n    // If we're entering the current route, we need to load it\n    if (value === index) {\n      this.setState((prevState) => {\n        if (prevState.loading) {\n          return { loading: false };\n        }\n\n        return null;\n      });\n    }\n  };\n\n  render() {\n    const { navigationState, index, layout, style } = this.props;\n    const { loading } = this.state;\n\n    const focused = navigationState.index === index;\n\n    return (\n      <View\n        accessibilityElementsHidden={!focused}\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n        style={[\n          styles.route,\n          // If we don't have the layout yet, make the focused screen fill the container\n          // This avoids delay before we are able to render pages side by side\n          layout.width\n            ? { width: layout.width }\n            : focused\n            ? StyleSheet.absoluteFill\n            : null,\n          style,\n        ]}\n      >\n        {\n          // Only render the route only if it's either focused or layout is available\n          // When layout is not available, we must not render unfocused routes\n          // so that the focused route can fill the screen\n          focused || layout.width ? this.props.children({ loading }) : null\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}