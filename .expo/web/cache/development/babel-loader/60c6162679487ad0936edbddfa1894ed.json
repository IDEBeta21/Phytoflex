{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar TabBarIndicator = function (_React$Component) {\n  _inherits(TabBarIndicator, _React$Component);\n\n  var _super = _createSuper(TabBarIndicator);\n\n  function TabBarIndicator() {\n    var _this;\n\n    _classCallCheck(this, TabBarIndicator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"fadeInIndicator\", function () {\n      var _this$props = _this.props,\n          navigationState = _this$props.navigationState,\n          layout = _this$props.layout,\n          width = _this$props.width,\n          getTabWidth = _this$props.getTabWidth;\n\n      if (!_this.isIndicatorShown && width === 'auto' && layout.width && navigationState.routes.every(function (_, i) {\n        return getTabWidth(i);\n      })) {\n        _this.isIndicatorShown = true;\n        Animated.timing(_this.opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true\n        }).start();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isIndicatorShown\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"opacity\", new Animated.Value(_this.props.width === 'auto' ? 0 : 1));\n\n    _defineProperty(_assertThisInitialized(_this), \"getTranslateX\", function (position, routes, getTabWidth) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n      var outputRange = routes.reduce(function (acc, _, i) {\n        if (i === 0) return [0];\n        return [].concat(_toConsumableArray(acc), [acc[i - 1] + getTabWidth(i - 1)]);\n      }, []);\n      var translateX = position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: 'clamp'\n      });\n      return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    });\n\n    return _this;\n  }\n\n  _createClass(TabBarIndicator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          position = _this$props2.position,\n          navigationState = _this$props2.navigationState,\n          getTabWidth = _this$props2.getTabWidth,\n          width = _this$props2.width,\n          style = _this$props2.style,\n          layout = _this$props2.layout;\n      var routes = navigationState.routes;\n      var transform = [];\n\n      if (layout.width) {\n        var translateX = routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n        transform.push({\n          translateX: translateX\n        });\n      }\n\n      if (width === 'auto') {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        var outputRange = inputRange.map(getTabWidth);\n        transform.push({\n          scaleX: routes.length > 1 ? position.interpolate({\n            inputRange: inputRange,\n            outputRange: outputRange,\n            extrapolate: 'clamp'\n          }) : outputRange[0]\n        }, {\n          translateX: 0.5\n        });\n      }\n\n      return React.createElement(Animated.View, {\n        style: [styles.indicator, {\n          width: width === 'auto' ? 1 : width\n        }, layout.width && Platform.OS !== 'macos' ? {\n          left: 0\n        } : {\n          left: 100 / routes.length * navigationState.index + \"%\"\n        }, {\n          transform: transform\n        }, width === 'auto' ? {\n          opacity: this.opacity\n        } : null, style]\n      });\n    }\n  }]);\n\n  return TabBarIndicator;\n}(React.Component);\n\nexport { TabBarIndicator as default };\nvar styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"sources":["TabBarIndicator.tsx"],"names":["React","componentDidMount","componentDidUpdate","getTabWidth","width","layout","navigationState","Animated","toValue","duration","easing","Easing","useNativeDriver","inputRange","routes","outputRange","i","acc","translateX","extrapolate","I18nManager","render","transform","scaleX","styles","Platform","left","index","opacity","indicator","backgroundColor","position","bottom","right","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  I18nManager,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\n\nimport type { Route, SceneRendererProps, NavigationState } from './types';\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n};\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        toValue: 1,\n        duration: 150,\n        easing: Easing.in(Easing.linear),\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = (\n    position: Animated.AnimatedInterpolation,\n    routes: Route[],\n    getTabWidth: GetTabWidth\n  ) => {\n    const inputRange = routes.map((_, i) => i);\n\n    // every index contains widths at all previous indices\n    const outputRange = routes.reduce<number[]>((acc, _, i) => {\n      if (i === 0) return [0];\n      return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n    }, []);\n\n    const translateX = position.interpolate({\n      inputRange,\n      outputRange,\n      extrapolate: 'clamp',\n    });\n\n    return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n  };\n\n  render() {\n    const { position, navigationState, getTabWidth, width, style, layout } =\n      this.props;\n    const { routes } = navigationState;\n\n    const transform = [];\n\n    if (layout.width) {\n      const translateX =\n        routes.length > 1\n          ? this.getTranslateX(position, routes, getTabWidth)\n          : 0;\n\n      transform.push({ translateX });\n    }\n\n    if (width === 'auto') {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      transform.push(\n        {\n          scaleX:\n            routes.length > 1\n              ? position.interpolate({\n                  inputRange,\n                  outputRange,\n                  extrapolate: 'clamp',\n                })\n              : outputRange[0],\n        },\n        { translateX: 0.5 }\n      );\n    }\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          { width: width === 'auto' ? 1 : width },\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          // If platform is macos use `left` property as `transform` is broken at the moment.\n          // See: https://github.com/microsoft/react-native-macos/issues/280\n          layout.width && Platform.OS !== 'macos'\n            ? { left: 0 }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          { transform },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}