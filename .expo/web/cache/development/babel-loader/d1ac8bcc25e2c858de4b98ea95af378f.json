{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"state\", \"navigation\", \"descriptors\"],\n    _excluded2 = [\"navigationState\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\nexport default function TabBarTop(_ref) {\n  var _focusedOptions$tabBa, _focusedOptions$tabBa2;\n\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  var activeColor = (_focusedOptions$tabBa = focusedOptions.tabBarActiveTintColor) !== null && _focusedOptions$tabBa !== void 0 ? _focusedOptions$tabBa : colors.text;\n  var inactiveColor = (_focusedOptions$tabBa2 = focusedOptions.tabBarInactiveTintColor) !== null && _focusedOptions$tabBa2 !== void 0 ? _focusedOptions$tabBa2 : Color(activeColor).alpha(0.5).rgb().string();\n  return React.createElement(TabBar, _extends({}, rest, {\n    navigationState: state,\n    scrollEnabled: focusedOptions.tabBarScrollEnabled,\n    bounces: focusedOptions.tabBarBounces,\n    activeColor: activeColor,\n    inactiveColor: inactiveColor,\n    pressColor: focusedOptions.tabBarPressColor,\n    pressOpacity: focusedOptions.tabBarPressOpacity,\n    tabStyle: focusedOptions.tabBarItemStyle,\n    indicatorStyle: [{\n      backgroundColor: colors.primary\n    }, focusedOptions.tabBarIndicatorStyle],\n    indicatorContainerStyle: focusedOptions.tabBarIndicatorContainerStyle,\n    contentContainerStyle: focusedOptions.tabBarContentContainerStyle,\n    style: [{\n      backgroundColor: colors.card\n    }, focusedOptions.tabBarStyle],\n    getAccessibilityLabel: function getAccessibilityLabel(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref3) {\n      var route = _ref3.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref4) {\n      var route = _ref4.route,\n          preventDefault = _ref4.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    onTabLongPress: function onTabLongPress(_ref5) {\n      var route = _ref5.route;\n      return navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    },\n    renderIcon: function renderIcon(_ref6) {\n      var route = _ref6.route,\n          focused = _ref6.focused,\n          color = _ref6.color;\n      var options = descriptors[route.key].options;\n\n      if (options.tabBarShowIcon === false) {\n        return null;\n      }\n\n      if (options.tabBarIcon !== undefined) {\n        var icon = options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n        return React.createElement(View, {\n          style: [styles.icon, options.tabBarIconStyle]\n        }, icon);\n      }\n\n      return null;\n    },\n    renderLabel: function renderLabel(_ref7) {\n      var route = _ref7.route,\n          focused = _ref7.focused,\n          color = _ref7.color;\n      var options = descriptors[route.key].options;\n\n      if (options.tabBarShowLabel === false) {\n        return null;\n      }\n\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n\n      if (typeof label === 'string') {\n        return React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, options.tabBarLabelStyle],\n          allowFontScaling: options.tabBarAllowFontScaling\n        }, label);\n      }\n\n      return label({\n        focused: focused,\n        color: color\n      });\n    },\n    renderBadge: function renderBadge(_ref8) {\n      var _tabBarBadge;\n\n      var route = _ref8.route;\n      var tabBarBadge = descriptors[route.key].options.tabBarBadge;\n      return (_tabBarBadge = tabBarBadge === null || tabBarBadge === void 0 ? void 0 : tabBarBadge()) !== null && _tabBarBadge !== void 0 ? _tabBarBadge : null;\n    },\n    renderIndicator: function renderIndicator(_ref9) {\n      var state = _ref9.navigationState,\n          rest = _objectWithoutProperties(_ref9, _excluded2);\n\n      return focusedOptions.tabBarIndicator ? focusedOptions.tabBarIndicator(_objectSpread({\n        state: state\n      }, rest)) : React.createElement(TabBarIndicator, _extends({\n        navigationState: state\n      }, rest));\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["rest","colors","useTheme","focusedOptions","descriptors","state","activeColor","inactiveColor","Color","backgroundColor","primary","card","route","preventDefault","event","type","target","canPreventDefault","key","color","options","icon","focused","styles","label","tabBarAllowFontScaling","tabBarBadge","navigationState","height","width","textAlign","textTransform","fontSize","margin"],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  const activeColor = focusedOptions.tabBarActiveTintColor ?? colors.text;\n  const inactiveColor =\n    focusedOptions.tabBarInactiveTintColor ??\n    Color(activeColor).alpha(0.5).rgb().string();\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      scrollEnabled={focusedOptions.tabBarScrollEnabled}\n      bounces={focusedOptions.tabBarBounces}\n      activeColor={activeColor}\n      inactiveColor={inactiveColor}\n      pressColor={focusedOptions.tabBarPressColor}\n      pressOpacity={focusedOptions.tabBarPressOpacity}\n      tabStyle={focusedOptions.tabBarItemStyle}\n      indicatorStyle={[\n        { backgroundColor: colors.primary },\n        focusedOptions.tabBarIndicatorStyle,\n      ]}\n      indicatorContainerStyle={focusedOptions.tabBarIndicatorContainerStyle}\n      contentContainerStyle={focusedOptions.tabBarContentContainerStyle}\n      style={[{ backgroundColor: colors.card }, focusedOptions.tabBarStyle]}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowIcon === false) {\n          return null;\n        }\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return (\n            <View style={[styles.icon, options.tabBarIconStyle]}>{icon}</View>\n          );\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowLabel === false) {\n          return null;\n        }\n\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, options.tabBarLabelStyle]}\n              allowFontScaling={options.tabBarAllowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n      renderBadge={({ route }) => {\n        const { tabBarBadge } = descriptors[route.key].options;\n\n        return tabBarBadge?.() ?? null;\n      }}\n      renderIndicator={({ navigationState: state, ...rest }) => {\n        return focusedOptions.tabBarIndicator ? (\n          focusedOptions.tabBarIndicator({\n            state: state as TabNavigationState<ParamListBase>,\n            ...rest,\n          })\n        ) : (\n          <TabBarIndicator navigationState={state} {...rest} />\n        );\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}