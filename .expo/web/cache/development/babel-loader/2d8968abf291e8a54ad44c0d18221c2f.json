{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\xx\\\\Desktop\\\\Phytoflex\\\\components\\\\PFTextInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport { TextInput as XTextInput } from 'react-native-paper';\nimport { PFText } from '.';\nimport Colors from \"../utils/globalColors\";\nexport var PFTextInput = function PFTextInput(_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      onChangeText = _ref.onChangeText,\n      _ref$autoCapitalize = _ref.autoCapitalize,\n      autoCapitalize = _ref$autoCapitalize === void 0 ? 'none' : _ref$autoCapitalize,\n      onBlur = _ref.onBlur,\n      error = _ref.error,\n      _ref$secureTextEntry = _ref.secureTextEntry,\n      secureTextEntry = _ref$secureTextEntry === void 0 ? false : _ref$secureTextEntry,\n      style = _ref.style,\n      containerStyle = _ref.containerStyle,\n      right = _ref.right,\n      _ref$errorMsg = _ref.errorMsg,\n      errorMsg = _ref$errorMsg === void 0 ? '' : _ref$errorMsg,\n      onFocus = _ref.onFocus,\n      onEndEditting = _ref.onEndEditting,\n      onSubmitEditing = _ref.onSubmitEditing,\n      nonEditable = _ref.nonEditable,\n      active = _ref.active,\n      _ref$roundness = _ref.roundness,\n      roundness = _ref$roundness === void 0 ? 20 : _ref$roundness,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'outlined' : _ref$mode,\n      _ref$dense = _ref.dense,\n      dense = _ref$dense === void 0 ? false : _ref$dense,\n      _ref$autoFocus = _ref.autoFocus,\n      autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,\n      disabled = _ref.disabled,\n      underlineColor = _ref.underlineColor;\n  return React.createElement(View, {\n    style: _objectSpread(_objectSpread({}, styles.textInput), containerStyle),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, React.createElement(XTextInput, {\n    label: label,\n    value: value,\n    onChangeText: onChangeText,\n    autoCapitalize: autoCapitalize,\n    autoCorrect: false,\n    mode: mode,\n    outlineColor: active ? Colors.primary : Colors.secondary,\n    activeOutlineColor: Colors.primary,\n    activeUnderlineColor: Colors.primary,\n    underlineColor: Colors.white,\n    onBlur: onBlur,\n    theme: {\n      colors: {\n        text: Colors.primary,\n        placeholder: active ? Colors.primary : Colors.primary\n      },\n      fonts: {\n        regular: {\n          fontFamily: 'poppins-light'\n        }\n      },\n      roundness: roundness\n    },\n    error: error,\n    secureTextEntry: secureTextEntry,\n    dense: dense,\n    style: _objectSpread({\n      backgroundColor: Colors.white\n    }, style),\n    right: right,\n    onFocus: onFocus,\n    editable: nonEditable ? false : true,\n    multiline: multiline,\n    render: function render(innerProps) {\n      return React.createElement(NativeTextInput, _extends({}, innerProps, {\n        style: [innerProps.style, {\n          textAlignVertical: 'center',\n          fontFamily: 'poppins-semiBold',\n          fontSize: 20,\n          padding: 0,\n          borderBottomWidth: 0\n        }],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      }));\n    },\n    onSubmitEditing: onSubmitEditing,\n    autoFocus: autoFocus,\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }), errorMsg ? React.createElement(Text, {\n    color: Colors.red,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  }, errorMsg) : null);\n};\nvar styles = StyleSheet.create({\n  textInput: {\n    borderColor: Colors.primary,\n    borderRadius: 15,\n    borderWidth: 1,\n    marginBottom: 1,\n    paddingHorizontal: 10,\n    paddingBottom: 2,\n    fontSize: 16,\n    fontFamily: 'poppins-light'\n  }\n});","map":{"version":3,"sources":["C:/Users/xx/Desktop/Phytoflex/components/PFTextInput.js"],"names":["React","TextInput","XTextInput","PFText","Colors","PFTextInput","label","value","onChangeText","autoCapitalize","onBlur","error","secureTextEntry","style","containerStyle","right","errorMsg","onFocus","onEndEditting","onSubmitEditing","nonEditable","active","roundness","multiline","mode","dense","autoFocus","disabled","underlineColor","styles","textInput","primary","secondary","white","colors","text","placeholder","fonts","regular","fontFamily","backgroundColor","innerProps","textAlignVertical","fontSize","padding","borderBottomWidth","red","StyleSheet","create","borderColor","borderRadius","borderWidth","marginBottom","paddingHorizontal","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { StyleSheet } from 'react-native'\r\nimport { View, TextInput as NativeTextInput } from 'react-native'\r\nimport { TextInput as XTextInput } from 'react-native-paper'\r\n// import { Text } from './Text'\r\nimport { PFText } from '.'\r\n// import Colors from '../../../utils/Colors'\r\nimport Colors from '../utils/globalColors'\r\n\r\nexport const PFTextInput = ({\r\n        label, \r\n        value, \r\n        onChangeText, \r\n        autoCapitalize = 'none', \r\n        onBlur, \r\n        error, \r\n        secureTextEntry=false, \r\n        style, \r\n        containerStyle,\r\n        right, \r\n        errorMsg = '', \r\n        onFocus, \r\n        onEndEditting,\r\n        onSubmitEditing,\r\n        nonEditable,\r\n        active,\r\n        roundness = 20,\r\n        multiline = false,\r\n        mode = 'outlined',\r\n        dense = false,\r\n        autoFocus = false,\r\n        disabled,\r\n        underlineColor\r\n    }) => {\r\n    return (\r\n        <View style={{ ...styles.textInput , ...containerStyle }}>\r\n            <XTextInput\r\n                label={label}\r\n                value={value}\r\n                onChangeText={onChangeText}\r\n                autoCapitalize={autoCapitalize}\r\n                autoCorrect={false}\r\n                mode={mode}\r\n                // outlineColor={ active ? Colors.primary : Colors.secondary}\r\n                outlineColor={ active ? Colors.primary : Colors.secondary}\r\n                activeOutlineColor={Colors.primary}\r\n                activeUnderlineColor={Colors.primary}\r\n                underlineColor={Colors.white}\r\n                onBlur={ onBlur }\r\n                theme={{ \r\n                    colors: { text: Colors.primary, placeholder: active ? Colors.primary : Colors.primary}, \r\n                    fonts: {regular: { fontFamily: 'poppins-light'}}, \r\n                    roundness: roundness,\r\n                }}\r\n                error={error}\r\n                secureTextEntry={secureTextEntry}\r\n                dense={dense}\r\n                style={{ backgroundColor: Colors.white, ...style }}\r\n                right={right}\r\n                onFocus={onFocus}\r\n                // onEndEditing={onEndEditting}\r\n                editable={nonEditable ? false : true}\r\n                multiline={multiline}\r\n                render={(innerProps) => (\r\n                    <NativeTextInput \r\n                        {...innerProps}\r\n                        style={[innerProps.style, {textAlignVertical: 'center', fontFamily: 'poppins-semiBold', fontSize: 20, padding: 0, borderBottomWidth: 0}]}\r\n                    />\r\n                )}\r\n                onSubmitEditing={onSubmitEditing}\r\n                autoFocus={autoFocus}\r\n                disabled={disabled}\r\n            />\r\n            {\r\n            errorMsg \r\n                ? <Text color={Colors.red}>{errorMsg}</Text>\r\n                : null\r\n            }\r\n            \r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    textInput: {\r\n        borderColor: Colors.primary,\r\n        // backgroundColor: 'white', \r\n        borderRadius: 15,\r\n        borderWidth: 1,\r\n        marginBottom: 1,\r\n        paddingHorizontal: 10,\r\n        paddingBottom: 2,\r\n        fontSize: 16,\r\n        fontFamily: 'poppins-light',\r\n        // marginStart: 8,\r\n        // marginEnd: 8,\r\n        // alignItems: 'center'\r\n    },\r\n})\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { TextInput, StyleSheet, View, ImagePropTypes } from 'react-native';\r\n\r\n// export const PFTextInput = ({label, style, onChangeText}) => {\r\n//   const {value, onChange} = props;\r\n\r\n//   return (\r\n//     <View style={{ ...style , ...styles.container}}>\r\n//         <TextInput\r\n//         placeholder={label}\r\n//         style={styles.textInput}\r\n//         onChangeText={text => onChange(text)}\r\n//         // value={value}\r\n//         />\r\n//     </View>\r\n//   );\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//     textInput: {\r\n//         borderColor: '#1D4123',\r\n//         backgroundColor: 'white', \r\n//         borderRadius: 15,\r\n//         borderWidth: 1,\r\n//         marginBottom: 0,\r\n//         padding: 10,\r\n//         fontSize: 16,\r\n//         fontFamily: 'poppins-light',\r\n//         marginStart: 8,\r\n//         marginEnd: 8,\r\n//         alignItems: 'center'\r\n//     },\r\n// })"]},"metadata":{},"sourceType":"module"}