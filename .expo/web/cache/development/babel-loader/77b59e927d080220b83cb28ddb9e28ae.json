{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tabBar\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { CommonActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport MaterialTopTabBar from \"./MaterialTopTabBar\";\nexport default function MaterialTopTabView(_ref) {\n  var _ref$tabBar = _ref.tabBar,\n      tabBar = _ref$tabBar === void 0 ? function (props) {\n    return React.createElement(MaterialTopTabBar, props);\n  } : _ref$tabBar,\n      state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar(_objectSpread(_objectSpread({}, props), {}, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  return React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.navigate({\n        name: state.routes[index].name,\n        merge: true\n      })), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderLazyPlaceholder: function renderLazyPlaceholder(_ref3) {\n      var _descriptors$route$ke, _descriptors$route$ke2, _descriptors$route$ke3;\n\n      var route = _ref3.route;\n      return (_descriptors$route$ke = (_descriptors$route$ke2 = (_descriptors$route$ke3 = descriptors[route.key].options).lazyPlaceholder) === null || _descriptors$route$ke2 === void 0 ? void 0 : _descriptors$route$ke2.call(_descriptors$route$ke3)) !== null && _descriptors$route$ke !== void 0 ? _descriptors$route$ke : null;\n    },\n    lazy: function lazy(_ref4) {\n      var route = _ref4.route;\n      return descriptors[route.key].options.lazy === true;\n    },\n    lazyPreloadDistance: focusedOptions.lazyPreloadDistance,\n    swipeEnabled: focusedOptions.swipeEnabled,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  }));\n}","map":{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["tabBar","props","rest","colors","useTheme","renderTabBar","state","navigation","descriptors","focusedOptions","index","name","merge","target","key","route","type","backgroundColor","background"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { SceneRendererProps, TabView } from 'react-native-tab-view';\n\nimport type {\n  MaterialTopTabBarProps,\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n} from '../types';\nimport MaterialTopTabBar from './MaterialTopTabBar';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n};\n\nexport default function MaterialTopTabView({\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  return (\n    <TabView<Route<string>>\n      {...rest}\n      onIndexChange={(index) =>\n        navigation.dispatch({\n          ...CommonActions.navigate({\n            name: state.routes[index].name,\n            merge: true,\n          }),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      navigationState={state}\n      renderTabBar={renderTabBar}\n      renderLazyPlaceholder={({ route }) =>\n        descriptors[route.key].options.lazyPlaceholder?.() ?? null\n      }\n      lazy={({ route }) => descriptors[route.key].options.lazy === true}\n      lazyPreloadDistance={focusedOptions.lazyPreloadDistance}\n      swipeEnabled={focusedOptions.swipeEnabled}\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n      sceneContainerStyle={[\n        { backgroundColor: colors.background },\n        sceneContainerStyle,\n      ]}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}