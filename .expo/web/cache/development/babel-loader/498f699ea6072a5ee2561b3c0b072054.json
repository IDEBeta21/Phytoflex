{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\xx\\\\Desktop\\\\Phytoflex\\\\screens\\\\global\\\\ComponentsSample.js\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport React, { Component, useState } from 'react';\nimport { Portal } from 'react-native-paper';\nimport { globalStyles } from \"./globalStyles\";\nimport { PFText, PFTextInput, PFPopupMenu, PFActivityIndicator, PFModalLogin, PFModalAlert, PFModalPrompt, PFPrimaryButton, PFSecondaryButton, PFFlatList, AccountListItem, PlantListItem, AddressListItem, BadgeHistoryListItem, MessagaNotifItem, PFCard, PFSwitch } from \"../../components\";\nimport Colors from \"../../utils/globalColors\";\nimport SampleData from \"../../utils/SampleData\";\nimport { DrawerContent } from \"./Drawer\";\nimport { ScrollView } from 'react-native-gesture-handler';\nexport default function ComponentsSample(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginVisible = _useState2[0],\n      setloginVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmVisible = _useState4[0],\n      setconfirmVisible = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      alertVisible = _useState6[0],\n      setalerVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      popupvisible = _useState8[0],\n      setpopupvisible = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      inpText = _useState10[0],\n      setinpText = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isSwitchOn = _useState12[0],\n      setIsSwitchOn = _useState12[1];\n\n  var onToggleSwitch = function onToggleSwitch() {\n    return setIsSwitchOn(!isSwitchOn);\n  };\n\n  return React.createElement(View, {\n    style: styles.mainContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.searchBoxContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    style: styles.searchBoxIcon,\n    source: require(\"../../assets/drawerIcons/plantCareIcons/search.png\"),\n    resizeMode: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: {\n      fontSize: 15,\n      fontFamily: 'poppins-regular',\n      flex: 1\n    },\n    placeholder: \"Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), React.createElement(PFTextInput, {\n    mode: \"flat\",\n    label: \"Text Input Here\",\n    onChangeText: setinpText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), React.createElement(PFTextInput, {\n    mode: \"flat\",\n    label: \"Text Input Here\",\n    onChangeText: setinpText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), React.createElement(PFText, {\n    style: styles.titleText,\n    color: Colors.primary,\n    weight: 'italic',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"This is the Plant Care Main Page\"), React.createElement(Text, {\n    style: styles.paragraphText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Open up plantCareHomePage.js to start working on your app!\"), React.createElement(Button, {\n    onPress: function onPress() {\n      return setloginVisible(true);\n    },\n    title: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return setconfirmVisible(true);\n    },\n    title: \"Confirmation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return setalerVisible(true);\n    },\n    title: \"Alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return setpopupvisible(true);\n    },\n    title: \"Popup Menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), React.createElement(PFPrimaryButton, {\n    icon: \"account-circle\",\n    bordered: false,\n    style: {\n      padding: 10\n    },\n    onPress: function onPress() {\n      return Alert.alert(\"Hello\");\n    },\n    title: \"PF Primary Button\",\n    roundness: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }), React.createElement(PFSecondaryButton, {\n    style: {\n      padding: 10\n    },\n    onPress: function onPress() {\n      return Alert.alert(\"Hello\");\n    },\n    title: \"PF Primary Button\",\n    roundness: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }), React.createElement(PFFlatList, {\n    noDataMessage: \"No Followers\",\n    data: SampleData.follower,\n    renderItem: function renderItem(item) {\n      return React.createElement(Pressable, {\n        onPress: function onPress() {\n          return Alert.alert(item.fName);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: 'black',\n          padding: 10,\n          margin: 2,\n          paddingVertical: 20,\n          borderRadius: 12,\n          borderWidth: 1,\n          borderColor: 'green'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, item.fName, \" \", item.lName));\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, React.createElement(PFFlatList, {\n    numColumns: 2,\n    noDataMessage: \"No Followers\",\n    data: SampleData.cardData,\n    renderItem: function renderItem(item) {\n      return React.createElement(PFCard, {\n        imageURL: item.imageURL,\n        description: item.description,\n        onPress: function onPress() {\n          return Alert.alert(item.name);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  })), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, React.createElement(PFFlatList, {\n    numColumns: 1,\n    noDataMessage: \"Nothing here\",\n    data: SampleData.userList,\n    renderItem: function renderItem(item) {\n      return React.createElement(AccountListItem, {\n        imageURL: item.imageURL,\n        accountName: item.fName + ' ' + item.lName,\n        onPress: function onPress() {\n          return Alert.alert(item.fname);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  })), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      borderWidth: 1,\n      borderColor: 'black',\n      margin: 5,\n      padding: 5,\n      borderRadius: 7\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, React.createElement(PFFlatList, {\n    numColumns: 1,\n    noDataMessage: \"No Plant item to post\",\n    data: SampleData.itemList,\n    renderItem: function renderItem(item) {\n      return React.createElement(PlantListItem, {\n        imageURL: item.imageURL,\n        itemName: item.itemName,\n        category: item.category,\n        price: item.price,\n        quantity: item.quantity,\n        onPress: function onPress() {\n          return Alert.alert(item.itemName);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }\n  }, React.createElement(PFFlatList, {\n    numColumns: 2,\n    noDataMessage: \"No Plant to Post\",\n    data: SampleData.itemList,\n    renderItem: function renderItem(item) {\n      return React.createElement(PlantListItem, {\n        CardList: true,\n        imageURL: item.imageURL,\n        itemName: item.itemName,\n        category: item.category,\n        price: item.price,\n        sold: item.sold,\n        onPress: function onPress() {\n          return Alert.alert(item.itemName);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  })), React.createElement(Button, {\n    onPress: function onPress() {\n      return navigation.navigate('PlantCareTips');\n    },\n    title: \"Tips\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, React.createElement(PFText, {\n    weight: \"regular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }, \"Push Notification\")), React.createElement(PFSwitch, {\n    style: {\n      flex: 1\n    },\n    value: isSwitchOn,\n    onValueChange: onToggleSwitch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }\n  }, React.createElement(PFFlatList, {\n    noDataMessage: \"No Address Saved Yet\",\n    data: SampleData.address,\n    renderItem: function renderItem(item) {\n      return React.createElement(AddressListItem, {\n        onEditPress: function onEditPress() {\n          return Alert.alert('Edit pressed');\n        },\n        defaultAddress: item.defaultAddress,\n        city: item.city,\n        contactNumber: item.contactNumber,\n        address: item.address,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }\n  }, React.createElement(PFFlatList, {\n    noDataMessage: \"Nothing here\",\n    data: SampleData.badgeHistory,\n    renderItem: function renderItem(item) {\n      return React.createElement(BadgeHistoryListItem, {\n        points: item.points,\n        message: item.message,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }\n  }, React.createElement(PFFlatList, {\n    noDataMessage: \"Nothing here\",\n    data: SampleData.messageNotif,\n    renderItem: function renderItem(item) {\n      return React.createElement(MessagaNotifItem, {\n        imageURL: item.imageURL,\n        senderName: item.name,\n        messagePreview: item.messagePreview,\n        timeRecieved: item.timeRecieved,\n        onProfilePress: function onProfilePress() {\n          return Alert.alert('Profile Picture Pressed');\n        },\n        onMessagePress: function onMessagePress() {\n          return Alert.alert('Message Pressed');\n        },\n        onDeletePress: function onDeletePress() {\n          return Alert.alert('Delete Button Pressed');\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }\n  })), React.createElement(PFModalLogin, {\n    title: \"SUCCESSFUL\",\n    message: \"Transaction Succeeded\",\n    visible: loginVisible,\n    modalClose: function modalClose() {\n      return setloginVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }\n  }), React.createElement(PFModalPrompt, {\n    title: \"CONFIRMATION\",\n    message: \"Are you sure you want to accept the offer?\",\n    visible: confirmVisible,\n    modalClose: function modalClose() {\n      return setconfirmVisible(false);\n    },\n    type: \"confirm\",\n    onConfirm: function onConfirm() {\n      return Alert.alert(\"Clicked!!\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }\n  }), React.createElement(PFModalAlert, {\n    title: \"SUCCESSFUL\",\n    message: \"Transaction Succeeded\",\n    visible: alertVisible,\n    modalClose: function modalClose() {\n      return setalerVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }\n  }), React.createElement(PFPopupMenu, {\n    visible: popupvisible,\n    modalClose: function modalClose() {\n      return setpopupvisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }\n  }), React.createElement(PFActivityIndicator, {\n    visible: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }\n  })), React.createElement(TouchableOpacity, {\n    activeOpacity: 0.7,\n    style: styles.fabContainer,\n    onPress: function onPress() {\n      return navigation.navigate('Instruction');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/drawerIcons/plantCareIcons/camera.png\"),\n    style: styles.fabImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  mainContainer: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  titleText: {\n    fontSize: 14,\n    color: '#1D4123'\n  },\n  paragraphText: {\n    fontFamily: 'poppins-regular',\n    fontSize: 12,\n    color: '#1D4123',\n    marginVertical: 8,\n    lineHeight: 20\n  },\n  searchBoxContainer: {\n    backgroundColor: '#F5F7FA',\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    marginVertical: 10,\n    alignItems: 'center',\n    flexDirection: 'row',\n    borderRadius: 12\n  },\n  searchBoxIcon: {\n    height: 20,\n    width: 20\n  },\n  fab: {\n    position: 'absolute',\n    margin: 15,\n    right: 0,\n    bottom: 0,\n    backgroundColor: '#F5F7FA'\n  },\n  fabContainer: {\n    backgroundColor: Colors.white,\n    position: 'absolute',\n    width: 60,\n    height: 60,\n    alignItems: 'center',\n    justifyContent: 'center',\n    right: 15,\n    bottom: 20,\n    borderRadius: 35,\n    shadowColor: \"black\",\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 0,\n    elevation: 10\n  },\n  fabImage: {\n    resizeMode: 'contain',\n    width: 25,\n    height: 25\n  }\n});","map":{"version":3,"sources":["C:/Users/xx/Desktop/Phytoflex/screens/global/ComponentsSample.js"],"names":["ViewPropTypes","React","Component","useState","Portal","globalStyles","PFText","PFTextInput","PFPopupMenu","PFActivityIndicator","PFModalLogin","PFModalAlert","PFModalPrompt","PFPrimaryButton","PFSecondaryButton","PFFlatList","AccountListItem","PlantListItem","AddressListItem","BadgeHistoryListItem","MessagaNotifItem","PFCard","PFSwitch","Colors","SampleData","DrawerContent","ScrollView","ComponentsSample","navigation","loginVisible","setloginVisible","confirmVisible","setconfirmVisible","alertVisible","setalerVisible","popupvisible","setpopupvisible","inpText","setinpText","isSwitchOn","setIsSwitchOn","onToggleSwitch","styles","mainContainer","searchBoxContainer","searchBoxIcon","require","fontSize","fontFamily","flex","titleText","primary","paragraphText","padding","Alert","alert","follower","item","fName","color","margin","paddingVertical","borderRadius","borderWidth","borderColor","lName","id","cardData","imageURL","description","name","index","userList","fname","itemList","itemName","category","price","quantity","sold","navigate","flexDirection","justifyContent","address","defaultAddress","city","contactNumber","badgeHistory","points","message","messageNotif","messagePreview","timeRecieved","fabContainer","fabImage","StyleSheet","create","backgroundColor","marginVertical","lineHeight","paddingHorizontal","alignItems","height","width","fab","position","right","bottom","white","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","resizeMode"],"mappings":"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","sourcesContent":["import { Button, Text, View, StyleSheet, TextInput, Image, TouchableOpacity, Alert, FlatList, Pressable, ViewPropTypes} from 'react-native';\r\nimport React, { Component, useState } from 'react';\r\nimport { Portal } from 'react-native-paper';\r\nimport { globalStyles } from './globalStyles';\r\n\r\n\r\n// global import\r\nimport { \r\n  PFText , PFTextInput, PFPopupMenu, PFActivityIndicator,\r\n  PFModalLogin , PFModalAlert, PFModalPrompt, \r\n  PFPrimaryButton, PFSecondaryButton,\r\n  PFFlatList, \r\n  AccountListItem, PlantListItem, AddressListItem, BadgeHistoryListItem, MessagaNotifItem,\r\n  PFCard, \r\n  PFSwitch\r\n} from '../../components';\r\n\r\nimport Colors from '../../utils/globalColors';\r\n\r\nimport SampleData from '../../utils/SampleData';\r\n\r\nimport { DrawerContent } from './Drawer';\r\n\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\n\r\nexport default function ComponentsSample({navigation}) {\r\n  // Calling Plantcare search screen\r\n  // Modals\r\n  const [loginVisible, setloginVisible] = useState(false)\r\n  const [confirmVisible, setconfirmVisible] = useState(false)\r\n  const [alertVisible, setalerVisible] = useState(false)\r\n\r\n  const [popupvisible, setpopupvisible] = useState(false)\r\n\r\n  // TextInput\r\n  const [inpText, setinpText] = useState(\"\")\r\n\r\n  // Switch\r\n  const [isSwitchOn, setIsSwitchOn] = useState(false);\r\n  const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\r\n\r\n\r\n  return (\r\n    <View style={ styles.mainContainer }>\r\n      <ScrollView\r\n        showsHorizontalScrollIndicator={false}\r\n        showsVerticalScrollIndicator={false}\r\n      >\r\n      <View style={styles.searchBoxContainer}>\r\n        <Image\r\n          style={styles.searchBoxIcon}\r\n          source={require('../../assets/drawerIcons/plantCareIcons/search.png')}\r\n          resizeMode='contain'\r\n        />\r\n        <TextInput\r\n          style={{fontSize: 15, fontFamily: 'poppins-regular', flex: 1}}\r\n          placeholder='Search'\r\n        />\r\n      </View>\r\n\r\n      <PFTextInput\r\n        mode='flat'\r\n        label='Text Input Here'\r\n        onChangeText={setinpText}\r\n        // disabled={disabled}\r\n      />\r\n      <PFTextInput\r\n        mode='flat'\r\n        label='Text Input Here'\r\n        onChangeText={setinpText}\r\n        // disabled={disabled}\r\n      />\r\n\r\n      <PFText style={ styles.titleText } color={Colors.primary} weight={'italic'}>\r\n        This is the Plant Care Main Page\r\n      </PFText>\r\n\r\n      <Text style={ styles.paragraphText }>\r\n        Open up plantCareHomePage.js to start working on your app!\r\n      </Text>\r\n\r\n      {/* <Button onPress={() => toPlantCareSearch()} title=\"Plant Care Search\"></Button> */}\r\n      <Button \r\n        onPress={\r\n          // () => navigation.navigate('PlantCareSearch')\r\n          // () => this.props.navigation.dispatch(navigation.openDrawer())\r\n          () => setloginVisible(true)\r\n        } \r\n        title=\"Login\">\r\n      </Button>\r\n\r\n      <Text></Text>\r\n\r\n      <Button \r\n        onPress={\r\n          // () => navigation.navigate('PlantCareSearch')\r\n          // () => this.props.navigation.dispatch(navigation.openDrawer())\r\n          () => setconfirmVisible(true)\r\n        } \r\n        title=\"Confirmation\">\r\n      </Button>\r\n\r\n      <Text></Text>\r\n      \r\n      <Button \r\n        onPress={\r\n          () => setalerVisible(true)\r\n        } \r\n        title=\"Alert\">\r\n      </Button>\r\n\r\n      <Text></Text>\r\n\r\n      <Button \r\n        onPress={\r\n          () => setpopupvisible(true)\r\n        } \r\n        title=\"Popup Menu\">\r\n      </Button>\r\n\r\n      <Text></Text>\r\n\r\n      {/* <PFFlatListFollower\r\n        data={SampleData.userList}\r\n        renderItem={({item}) => (\r\n          <PFText>{item.fName}</PFText>\r\n        )}\r\n      /> */}\r\n\r\n      <PFPrimaryButton\r\n        icon={\"account-circle\"}\r\n        bordered={false}\r\n        style={{padding: 10}}\r\n        onPress={() => Alert.alert(\"Hello\")}\r\n        title={\"PF Primary Button\"}\r\n        roundness={30}\r\n      ></PFPrimaryButton>\r\n      \r\n      <Text></Text>\r\n      \r\n      <PFSecondaryButton\r\n        style={{padding: 10}}\r\n        onPress={() => Alert.alert(\"Hello\")}\r\n        title={\"PF Primary Button\"}\r\n        roundness={10}\r\n      ></PFSecondaryButton>\r\n\r\n      <Text></Text>\r\n\r\n      <PFFlatList\r\n        noDataMessage='No Followers'\r\n        data={SampleData.follower}\r\n        renderItem={(item) => (\r\n          <Pressable onPress={() => Alert.alert(item.fName)}>\r\n            <Text \r\n              style={{\r\n                color: 'black', padding: 10, margin: 2,\r\n                paddingVertical: 20, borderRadius: 12, \r\n                borderWidth: 1, borderColor: 'green', \r\n              }}\r\n            >\r\n                {item.fName} {item.lName}\r\n              \r\n            </Text>\r\n          </Pressable>\r\n        )}\r\n        keyExtractor={item => item.id}\r\n      />\r\n\r\n      <Text></Text>\r\n      \r\n      <View>\r\n        <PFFlatList\r\n          numColumns={2}\r\n          noDataMessage='No Followers'\r\n          data={SampleData.cardData}\r\n          renderItem={(item) => (\r\n            <PFCard \r\n              imageURL={item.imageURL}\r\n              description={item.description}\r\n              onPress={() => Alert.alert(item.name)}/>\r\n          )}\r\n          keyExtractor={(item,index) => index}\r\n        />\r\n      </View>\r\n\r\n      <Text></Text>\r\n\r\n      {/* Flatlist for accounts */}\r\n      <View>\r\n        <PFFlatList\r\n          numColumns={1}\r\n          noDataMessage='Nothing here'\r\n          data={SampleData.userList}\r\n          renderItem={(item) => (\r\n            <AccountListItem \r\n              imageURL={item.imageURL}\r\n              accountName={item.fName + ' ' + item.lName}\r\n              onPress={() => Alert.alert(item.fname)}\r\n            />\r\n          )}\r\n          keyExtractor={(item,index) => index}\r\n        />\r\n      </View>\r\n      \r\n\r\n      {/* <PFCard></PFCard> */}\r\n      <Text></Text>\r\n\r\n      {/* Flatlist for itemlist for shop */}\r\n      <View style={{borderWidth: 1, borderColor: 'black', margin: 5, padding: 5, borderRadius: 7}}>\r\n        <PFFlatList\r\n          numColumns={1}\r\n          noDataMessage='No Plant item to post'\r\n          data={SampleData.itemList}\r\n          renderItem={(item) => (\r\n            <PlantListItem \r\n              imageURL={item.imageURL}\r\n              itemName={item.itemName}\r\n              category={item.category}\r\n              price={item.price}\r\n              quantity={item.quantity}\r\n              onPress={() => Alert.alert(item.itemName)}\r\n            />\r\n          )}\r\n          keyExtractor={(item,index) => index}\r\n        />\r\n      </View>\r\n\r\n\r\n      {/* Flatlist for itemlist as card for shop */}\r\n      <View>\r\n        <PFFlatList\r\n          numColumns={2}\r\n          noDataMessage='No Plant to Post'\r\n          data={SampleData.itemList}\r\n          renderItem={(item) => (\r\n            <PlantListItem \r\n              CardList\r\n              imageURL={item.imageURL}\r\n              itemName={item.itemName}\r\n              category={item.category}\r\n              price={item.price}\r\n              sold={item.sold}\r\n              onPress={() => Alert.alert(item.itemName)}\r\n            />\r\n          )}\r\n          keyExtractor={(item,index) => index}\r\n        />\r\n      </View>\r\n\r\n      <Button \r\n        onPress={\r\n           () => navigation.navigate('PlantCareTips')\r\n          // () => this.props.navigation.dispatch(navigation.openDrawer())\r\n          //() => setalerVisible(true)\r\n        } \r\n        title=\"Tips\">\r\n      </Button>\r\n      \r\n      {/* Switch */}\r\n      <View style={{flex: 1, flexDirection: 'row'}}>\r\n        <View style={{flex: 1, justifyContent: 'center'}}>\r\n          <PFText weight='regular'>Push Notification</PFText>\r\n        </View>\r\n        <PFSwitch \r\n          style={{flex: 1}}\r\n          value={isSwitchOn}\r\n          onValueChange={onToggleSwitch}/>\r\n      </View>\r\n      \r\n\r\n      {/* Address list */}\r\n      <View>\r\n        <PFFlatList\r\n          // numColumns={1}\r\n          noDataMessage='No Address Saved Yet'\r\n          data={SampleData.address}\r\n          renderItem={(item) => (\r\n            <AddressListItem \r\n              onEditPress={() => Alert.alert('Edit pressed')}\r\n\r\n              defaultAddress={item.defaultAddress} \r\n              city={item.city}\r\n              contactNumber={item.contactNumber}\r\n              address={item.address}\r\n            />\r\n          )}\r\n          keyExtractor={(item,index) => index}\r\n        />\r\n      </View>\r\n\r\n      \r\n      {/* Badge History */}\r\n      <View>\r\n        <PFFlatList\r\n          // numColumns={1}\r\n          noDataMessage='Nothing here'\r\n          data={SampleData.badgeHistory}\r\n          renderItem={(item) => (\r\n            <BadgeHistoryListItem \r\n              points={item.points}\r\n              message={item.message}\r\n            />\r\n          )}\r\n          keyExtractor={(item,index) => index}\r\n        />\r\n      </View>\r\n\r\n      {/* Message Notification List */}\r\n      <View>\r\n        <PFFlatList\r\n          // numColumns={1}\r\n          noDataMessage='Nothing here'\r\n          data={SampleData.messageNotif}\r\n          renderItem={(item) => (\r\n            <MessagaNotifItem \r\n              imageURL={item.imageURL}\r\n              senderName={item.name}\r\n              messagePreview={item.messagePreview}\r\n              timeRecieved={item.timeRecieved}\r\n\r\n              onProfilePress={() => Alert.alert('Profile Picture Pressed')}\r\n              onMessagePress={() => Alert.alert('Message Pressed')}\r\n              onDeletePress={() => Alert.alert('Delete Button Pressed')}\r\n            />\r\n          )}\r\n          keyExtractor={(item,index) => index}\r\n        />\r\n      </View>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <PFModalLogin\r\n        title={\"SUCCESSFUL\"} \r\n        message={\"Transaction Succeeded\"} \r\n        visible={loginVisible} \r\n        modalClose={() => setloginVisible(false)} \r\n      ></PFModalLogin>\r\n\r\n      <PFModalPrompt \r\n        title={\"CONFIRMATION\"} \r\n        message={\"Are you sure you want to accept the offer?\"} \r\n        visible={confirmVisible} \r\n        modalClose={() => setconfirmVisible(false)} \r\n        type={\"confirm\"}\r\n        onConfirm={() => Alert.alert(\"Clicked!!\")}\r\n      ></PFModalPrompt>\r\n\r\n      <PFModalAlert\r\n        title={\"SUCCESSFUL\"} \r\n        message={\"Transaction Succeeded\"} \r\n        visible={alertVisible} \r\n        modalClose={() => setalerVisible(false)} \r\n      ></PFModalAlert>\r\n\r\n      <PFPopupMenu\r\n        visible={popupvisible}\r\n        modalClose={() => setpopupvisible(false)}\r\n      />\r\n\r\n\r\n      <PFActivityIndicator visible={false}/>\r\n      </ScrollView>\r\n\r\n      <TouchableOpacity\r\n        activeOpacity={0.7}\r\n        style={styles.fabContainer}\r\n        onPress={() => navigation.navigate('Instruction')}\r\n        >\r\n        <Image\r\n          // FAB using TouchableOpacity with an image\r\n          // For online image\r\n          source={ require('../../assets/drawerIcons/plantCareIcons/camera.png')}\r\n          // For local image\r\n          //source={require('./images/float-add-icon.png')}\r\n          style={styles.fabImage}\r\n        />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  mainContainer: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    // paddingHorizontal: 12\r\n  },\r\n  titleText: {\r\n    // fontFamily: 'poppins-semiBold',\r\n    fontSize: 14,\r\n    color: '#1D4123'\r\n  },\r\n  paragraphText: {\r\n    fontFamily: 'poppins-regular',\r\n    fontSize: 12,\r\n    color: '#1D4123',\r\n    marginVertical: 8,\r\n    lineHeight: 20,\r\n  },\r\n  searchBoxContainer: {\r\n    backgroundColor: '#F5F7FA',\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 5,\r\n    marginVertical: 10,\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    borderRadius: 12,\r\n    // flex:1,\r\n  },\r\n  searchBoxIcon: {\r\n    height: 20,\r\n    width: 20\r\n  },\r\n  fab: {\r\n    position: 'absolute',\r\n    margin: 15,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: '#F5F7FA',\r\n  },\r\n  fabContainer: {\r\n    backgroundColor: Colors.white,\r\n    position: 'absolute',\r\n    width: 60,\r\n    height: 60,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    right: 15,\r\n    bottom: 20,\r\n\r\n    borderRadius: 35,\r\n    // borderColor: 'black',\r\n    // borderWidth: 5,\r\n    shadowColor: \"black\",\r\n    shadowOffset: {\r\n        width: 0,\r\n        height: 5,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 0,\r\n    elevation: 10,\r\n  },\r\n  fabImage: {\r\n    // marginTop: 7,\r\n    resizeMode: 'contain',\r\n    width: 25,\r\n    height: 25,\r\n    //backgroundColor:'black'\r\n  },\r\n})"]},"metadata":{},"sourceType":"module"}