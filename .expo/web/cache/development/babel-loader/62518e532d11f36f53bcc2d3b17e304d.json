{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Ian\\\\Documents\\\\_Project\\\\Phytoflex\\\\node_modules\\\\react-native-gesture-handler\\\\touchables\\\\GenericTouchable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { State, BaseButton } from \"../GestureHandler\";\nimport PropTypes from 'prop-types';\nexport var TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2\n};\nvar PublicPropTypes = {\n  accessible: PropTypes.bool,\n  accessibilityLabel: PropTypes.node,\n  accessibilityHint: PropTypes.string,\n  hitSlop: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number\n  }),\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  onLayout: PropTypes.func,\n  onLongPress: PropTypes.func,\n  nativeID: PropTypes.string,\n  testID: PropTypes.string,\n  delayPressIn: PropTypes.number,\n  delayPressOut: PropTypes.number,\n  delayLongPress: PropTypes.number\n};\nvar InternalPropTypes = {\n  extraButtonProps: PropTypes.object,\n  onStateChange: PropTypes.func\n};\n\nvar GenericTouchable = function (_Component) {\n  _inherits(GenericTouchable, _Component);\n\n  var _super = _createSuper(GenericTouchable);\n\n  function GenericTouchable() {\n    var _this;\n\n    _classCallCheck(this, GenericTouchable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.longPressDetected = false;\n    _this.pointerInside = true;\n    _this.STATE = TOUCHABLE_STATE.UNDETERMINED;\n\n    _this.handlePressIn = function () {\n      if (_this.props.delayPressIn) {\n        _this.pressInTimeout = setTimeout(function () {\n          _this.moveToState(TOUCHABLE_STATE.BEGAN);\n\n          _this.pressInTimeout = null;\n        }, _this.props.delayPressIn);\n      } else {\n        _this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n\n      if (_this.props.onLongPress) {\n        var time = (_this.props.delayPressIn || 0) + (_this.props.delayLongPress || 0);\n        _this.longPressTimeout = setTimeout(_this.onLongPressDetected, time);\n      }\n    };\n\n    _this.handleMoveOutside = function () {\n      if (_this.props.delayPressOut) {\n        _this.pressOutTimeout = _this.pressOutTimeout || setTimeout(function () {\n          _this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n\n          _this.pressOutTimeout = null;\n        }, _this.props.delayPressOut);\n      } else {\n        _this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n      }\n    };\n\n    _this.handleGoToUndetermined = function () {\n      clearTimeout(_this.pressOutTimeout);\n\n      if (_this.props.delayPressOut) {\n        _this.pressOutTimeout = setTimeout(function () {\n          if (_this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n            _this.moveToState(TOUCHABLE_STATE.BEGAN);\n          }\n\n          _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n\n          _this.pressOutTimeout = null;\n        }, _this.props.delayPressOut);\n      } else {\n        if (_this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          _this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n\n        _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      }\n    };\n\n    _this.moveToState = function (newState) {\n      if (newState === _this.STATE) {\n        return;\n      }\n\n      if (newState === TOUCHABLE_STATE.BEGAN) {\n        _this.props.onPressIn && _this.props.onPressIn();\n      } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        _this.props.onPressOut && _this.props.onPressOut();\n      } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n        _this.reset();\n\n        if (_this.STATE === TOUCHABLE_STATE.BEGAN) {\n          _this.props.onPressOut && _this.props.onPressOut();\n        }\n      }\n\n      _this.props.onStateChange && _this.props.onStateChange(_this.STATE, newState);\n      _this.STATE = newState;\n    };\n\n    _this.onGestureEvent = function (_ref) {\n      var pointerInside = _ref.nativeEvent.pointerInside;\n\n      if (_this.pointerInside !== pointerInside) {\n        if (pointerInside) {\n          _this.onMoveIn();\n        } else {\n          _this.onMoveOut();\n        }\n      }\n\n      _this.pointerInside = pointerInside;\n    };\n\n    _this.onHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var state = nativeEvent.state;\n\n      if (state === State.CANCELLED || state === State.FAILED) {\n        _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      } else if (state === (Platform.OS === 'ios' ? State.ACTIVE : State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        _this.handlePressIn();\n      } else if (state === State.END) {\n        var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;\n\n        _this.handleGoToUndetermined();\n\n        if (shouldCallOnPress) {\n          _this.props.onPress && _this.props.onPress();\n        }\n      }\n    };\n\n    _this.onLongPressDetected = function () {\n      _this.longPressDetected = true;\n\n      _this.props.onLongPress();\n    };\n\n    _this.onMoveIn = function () {\n      if (_this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        _this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n    };\n\n    _this.onMoveOut = function () {\n      clearTimeout(_this.longPressTimeout);\n      _this.longPressTimeout = null;\n\n      if (_this.STATE === TOUCHABLE_STATE.BEGAN) {\n        _this.handleMoveOutside();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(GenericTouchable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.reset();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.longPressDetected = false;\n      this.pointerInside = true;\n      clearTimeout(this.pressInTimeout);\n      clearTimeout(this.pressOutTimeout);\n      clearTimeout(this.longPressTimeout);\n      this.pressOutTimeout = null;\n      this.longPressTimeout = null;\n      this.pressInTimeout = null;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var coreProps = {\n        accessible: this.props.accessible !== false,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityComponentType: this.props.accessibilityComponentType,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityStates: this.props.accessibilityStates,\n        accessibilityTraits: this.props.accessibilityTraits,\n        nativeID: this.props.nativeID,\n        testID: this.props.testID,\n        onLayout: this.props.onLayout,\n        hitSlop: this.props.hitSlop\n      };\n      return React.createElement(BaseButton, _extends({\n        onHandlerStateChange: this.props.disabled ? null : this.onHandlerStateChange,\n        onGestureEvent: this.onGestureEvent,\n        hitSlop: this.props.hitSlop\n      }, this.props.extraButtonProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, _extends({}, coreProps, {\n        style: this.props.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 9\n        }\n      }), this.props.children));\n    }\n  }]);\n\n  return GenericTouchable;\n}(Component);\n\nGenericTouchable.publicPropTypes = PublicPropTypes;\nGenericTouchable.internalPropTypes = InternalPropTypes;\nGenericTouchable.propTypes = _objectSpread(_objectSpread({}, InternalPropTypes), PublicPropTypes);\nGenericTouchable.defaultProps = {\n  delayLongPress: 600,\n  extraButtonProps: {\n    rippleColor: 'transparent'\n  }\n};\nexport { GenericTouchable as default };","map":{"version":3,"sources":["D:/Ian/Documents/_Project/Phytoflex/node_modules/react-native-gesture-handler/touchables/GenericTouchable.js"],"names":["React","Component","State","BaseButton","PropTypes","TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","PublicPropTypes","accessible","bool","accessibilityLabel","node","accessibilityHint","string","hitSlop","shape","top","number","left","bottom","right","disabled","onPress","func","onPressIn","onPressOut","onLayout","onLongPress","nativeID","testID","delayPressIn","delayPressOut","delayLongPress","InternalPropTypes","extraButtonProps","object","onStateChange","GenericTouchable","longPressDetected","pointerInside","STATE","handlePressIn","props","pressInTimeout","setTimeout","moveToState","time","longPressTimeout","onLongPressDetected","handleMoveOutside","pressOutTimeout","handleGoToUndetermined","clearTimeout","newState","reset","onGestureEvent","nativeEvent","onMoveIn","onMoveOut","onHandlerStateChange","state","CANCELLED","FAILED","Platform","OS","ACTIVE","END","shouldCallOnPress","coreProps","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityTraits","style","children","publicPropTypes","internalPropTypes","propTypes","defaultProps","rippleColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { State, BaseButton } from '../GestureHandler';\nimport PropTypes from 'prop-types';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n};\n\nconst PublicPropTypes = {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props.\n  accessible: PropTypes.bool,\n  accessibilityLabel: PropTypes.node,\n  accessibilityHint: PropTypes.string,\n  hitSlop: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number,\n  }),\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  onLayout: PropTypes.func,\n  onLongPress: PropTypes.func,\n  nativeID: PropTypes.string,\n  testID: PropTypes.string,\n  delayPressIn: PropTypes.number,\n  delayPressOut: PropTypes.number,\n  delayLongPress: PropTypes.number,\n};\n\nconst InternalPropTypes = {\n  extraButtonProps: PropTypes.object,\n  onStateChange: PropTypes.func,\n};\n\n/**\n * GenericTouchable is not intented to be used as it.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component {\n  static publicPropTypes = PublicPropTypes;\n  static internalPropTypes = InternalPropTypes;\n\n  // The prop type collections have to be outside of the class, as metro\n  // at this time does not compile `this.foo` correctly if HMR is enabled.\n  // https://github.com/kmagiera/react-native-gesture-handler/pull/406#issuecomment-453779977\n  static propTypes = {\n    ...InternalPropTypes,\n    ...PublicPropTypes,\n  };\n\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout;\n  pressOutTimeout;\n  longPressTimeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn = () => {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  };\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside = () => {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  };\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined = () => {\n    clearTimeout(this.pressOutTimeout);\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  };\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout);\n    clearTimeout(this.pressOutTimeout);\n    clearTimeout(this.longPressTimeout);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState = newState => {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn && this.props.onPressIn();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut && this.props.onPressOut();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut && this.props.onPressOut();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange && this.props.onStateChange(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  };\n\n  onGestureEvent = ({ nativeEvent: { pointerInside } }) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({ nativeEvent }) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS === 'ios' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress && this.props.onPress();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    this.props.onLongPress();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn = () => {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttles with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  };\n\n  onMoveOut = () => {\n    // long press shouldn't be longer detected\n    clearTimeout(this.longPressTimeout);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  };\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityRole: this.props.accessibilityRole,\n      accessibilityStates: this.props.accessibilityStates,\n      accessibilityTraits: this.props.accessibilityTraits,\n      nativeID: this.props.nativeID,\n      testID: this.props.testID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n    };\n\n    return (\n      <BaseButton\n        onHandlerStateChange={this.props.disabled ? null : this.onHandlerStateChange}\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={this.props.hitSlop}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}