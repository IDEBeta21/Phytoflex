{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\xx\\\\Desktop\\\\Phytoflex\\\\components\\\\Modals\\\\PFModalPrompt.js\";\n\nimport React, { useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableNativeFeedbackBase } from \"react-native-web/dist/index\";\nimport { color } from \"react-native-reanimated\";\nimport { PFText } from \"..\";\nimport Colors from \"../../utils/globalColors\";\nexport var PFModalPrompt = function PFModalPrompt(_ref) {\n  var title = _ref.title,\n      message = _ref.message,\n      visible = _ref.visible,\n      modalClose = _ref.modalClose,\n      onConfirm = _ref.onConfirm,\n      type = _ref.type;\n\n  var _useState = useState(visible),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  if (type == \"yesorno\" || type == null) {\n    return React.createElement(View, {\n      style: styles.centeredView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, React.createElement(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: visible,\n      onRequestClose: function onRequestClose() {\n        modalClose();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.centeredView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: styles.modalView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, React.createElement(PFText, {\n      style: styles.modalTextTitle,\n      weight: \"semi-bold\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }\n    }, title), React.createElement(PFText, {\n      style: styles.modalTextMessage,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }\n    }, message), React.createElement(View, {\n      style: styles.buttonArea,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, React.createElement(Pressable, {\n      style: [styles.button, styles.buttonClose],\n      onPress: function onPress() {\n        onConfirm();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }, React.createElement(PFText, {\n      style: styles.primaryButtonText,\n      color: 'white',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }\n    }, \"YES\")), React.createElement(Pressable, {\n      style: [styles.button, styles.buttonClose],\n      onPress: function onPress() {\n        modalClose();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }\n    }, React.createElement(PFText, {\n      style: styles.primaryButtonText,\n      color: 'white',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }\n    }, \"NO\")))))));\n  } else if (type == \"confirm\") {\n    return React.createElement(View, {\n      style: styles.centeredView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, React.createElement(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: visible,\n      onRequestClose: function onRequestClose() {\n        modalClose();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.centeredView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: styles.modalView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, React.createElement(PFText, {\n      style: styles.modalTextTitle,\n      weight: \"semi-bold\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, title), React.createElement(PFText, {\n      style: styles.modalTextMessage,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, message), React.createElement(View, {\n      style: styles.buttonArea,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, React.createElement(Pressable, {\n      style: [styles.button, styles.buttonClose],\n      onPress: function onPress() {\n        modalClose();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, React.createElement(PFText, {\n      style: styles.primaryButtonText,\n      color: 'white',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }\n    }, \"CANCEL\")), React.createElement(Pressable, {\n      style: [styles.button, styles.buttonClose],\n      onPress: function onPress() {\n        onConfirm();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }, React.createElement(PFText, {\n      style: styles.primaryButtonText,\n      color: 'white',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }, \"CONFIRM\")))))));\n  }\n};\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 8,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  buttonArea: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderRadius: 8,\n    padding: 10,\n    elevation: 2,\n    marginHorizontal: 10\n  },\n  buttonClose: {\n    backgroundColor: Colors.secondary\n  },\n  primaryButtonText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalTextTitl: {},\n  modalTextMessage: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/xx/Desktop/Phytoflex/components/Modals/PFModalPrompt.js"],"names":["React","useState","TouchableNativeFeedbackBase","color","PFText","Colors","PFModalPrompt","title","message","visible","modalClose","onConfirm","type","modalVisible","setModalVisible","styles","centeredView","modalView","modalTextTitle","modalTextMessage","buttonArea","button","buttonClose","primaryButtonText","StyleSheet","create","flex","justifyContent","alignItems","marginTop","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","flexDirection","marginHorizontal","secondary","fontWeight","textAlign","modalTextTitl","marginBottom"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;SAC0DC,2B;AAC1D,SAASC,KAAT,QAAsB,yBAAtB;AAEA,SAASC,MAAT,QAAuB,IAAvB;AAEA,OAAOC,MAAP;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAOvB;AAAA,MANFC,KAME,QANFA,KAME;AAAA,MALFC,OAKE,QALFA,OAKE;AAAA,MAJFC,OAIE,QAJFA,OAIE;AAAA,MAHFC,UAGE,QAHFA,UAGE;AAAA,MAFFC,SAEE,QAFFA,SAEE;AAAA,MADFC,IACE,QADFA,IACE;;AAEJ,kBAAwCX,QAAQ,CAACQ,OAAD,CAAhD;AAAA;AAAA,MAAOI,YAAP;AAAA,MAAqBC,eAArB;;AAEE,MAAGF,IAAI,IAAI,SAAR,IAAqBA,IAAI,IAAI,IAAhC,EAAqC;AACjC,WACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEG,MAAM,CAACC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,KAAD;AACI,MAAA,aAAa,EAAC,OADlB;AAEI,MAAA,WAAW,EAAE,IAFjB;AAII,MAAA,OAAO,EAAEP,OAJb;AAKI,MAAA,cAAc,EAAE,0BAAM;AAEtBC,QAAAA,UAAU;AACT,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEK,MAAM,CAACC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEF,MAAM,CAACG,cAAtB;AAAsC,MAAA,MAAM,EAAE,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4DX,KAA5D,CADJ,EAEI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEQ,MAAM,CAACI,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCX,OAAzC,CAFJ,EAGI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEO,MAAM,CAACK,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,CAACL,MAAM,CAACM,MAAR,EAAgBN,MAAM,CAACO,WAAvB,CADX;AAGI,MAAA,OAAO,EAAE,mBAAM;AAACX,QAAAA,SAAS;AAAG,OAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEI,MAAM,CAACQ,iBAAtB;AAAyC,MAAA,KAAK,EAAE,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANJ,CADJ,EASI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,CAACR,MAAM,CAACM,MAAR,EAAgBN,MAAM,CAACO,WAAvB,CADX;AAGI,MAAA,OAAO,EAAE,mBAAM;AAACZ,QAAAA,UAAU;AAAG,OAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEK,MAAM,CAACQ,iBAAtB;AAAyC,MAAA,KAAK,EAAE,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,CATJ,CAHJ,CADA,CAVJ,CADA,CADJ;AA8CH,GA/CD,MA+CM,IAAGX,IAAI,IAAI,SAAX,EAAqB;AACvB,WACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEG,MAAM,CAACC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,KAAD;AACI,MAAA,aAAa,EAAC,OADlB;AAEI,MAAA,WAAW,EAAE,IAFjB;AAII,MAAA,OAAO,EAAEP,OAJb;AAKI,MAAA,cAAc,EAAE,0BAAM;AAEtBC,QAAAA,UAAU;AACT,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEK,MAAM,CAACC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEF,MAAM,CAACG,cAAtB;AAAsC,MAAA,MAAM,EAAE,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4DX,KAA5D,CADJ,EAEI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEQ,MAAM,CAACI,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCX,OAAzC,CAFJ,EAGI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEO,MAAM,CAACK,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,CAACL,MAAM,CAACM,MAAR,EAAgBN,MAAM,CAACO,WAAvB,CADX;AAGI,MAAA,OAAO,EAAE,mBAAM;AAACZ,QAAAA,UAAU;AAAG,OAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEK,MAAM,CAACQ,iBAAtB;AAAyC,MAAA,KAAK,EAAE,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,CADJ,EASI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,CAACR,MAAM,CAACM,MAAR,EAAgBN,MAAM,CAACO,WAAvB,CADX;AAGI,MAAA,OAAO,EAAE,mBAAM;AAACX,QAAAA,SAAS;AAAG,OAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEI,MAAM,CAACQ,iBAAtB;AAAyC,MAAA,KAAK,EAAE,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANJ,CATJ,CAHJ,CADA,CAVJ,CADA,CADJ;AA8CH;AAGJ,CA5GM;AA8GP,IAAMR,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BT,EAAAA,YAAY,EAAE;AACZU,IAAAA,IAAI,EAAE,CADM;AAEZC,IAAAA,cAAc,EAAE,QAFJ;AAGZC,IAAAA,UAAU,EAAE,QAHA;AAIZC,IAAAA,SAAS,EAAE;AAJC,GADiB;AAO/BZ,EAAAA,SAAS,EAAE;AACTa,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,eAAe,EAAE,OAFR;AAGTC,IAAAA,YAAY,EAAE,CAHL;AAITC,IAAAA,OAAO,EAAE,EAJA;AAKTL,IAAAA,UAAU,EAAE,QALH;AAMTM,IAAAA,WAAW,EAAE,MANJ;AAOTC,IAAAA,YAAY,EAAE;AACZC,MAAAA,KAAK,EAAE,CADK;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAPL;AAWTC,IAAAA,aAAa,EAAE,IAXN;AAYTC,IAAAA,YAAY,EAAE,CAZL;AAaTC,IAAAA,SAAS,EAAE;AAbF,GAPoB;AAsB/BpB,EAAAA,UAAU,EAAE;AAEVqB,IAAAA,aAAa,EAAE;AAFL,GAtBmB;AA0B/BpB,EAAAA,MAAM,EAAE;AACNW,IAAAA,YAAY,EAAE,CADR;AAENC,IAAAA,OAAO,EAAE,EAFH;AAGNO,IAAAA,SAAS,EAAE,CAHL;AAINE,IAAAA,gBAAgB,EAAE;AAJZ,GA1BuB;AAgC/BpB,EAAAA,WAAW,EAAE;AACXS,IAAAA,eAAe,EAAE1B,MAAM,CAACsC;AADb,GAhCkB;AAmC/BpB,EAAAA,iBAAiB,EAAE;AACjBpB,IAAAA,KAAK,EAAE,OADU;AAEjByC,IAAAA,UAAU,EAAE,MAFK;AAGjBC,IAAAA,SAAS,EAAE;AAHM,GAnCY;AAwC/BC,EAAAA,aAAa,EAAE,EAxCgB;AA2C/B3B,EAAAA,gBAAgB,EAAE;AAChB4B,IAAAA,YAAY,EAAE,EADE;AAEhBF,IAAAA,SAAS,EAAE;AAFK;AA3Ca,CAAlB,CAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Alert, Modal, StyleSheet, Text, Pressable, View, TouchableNativeFeedbackBase } from \"react-native\";\r\nimport { color } from \"react-native-reanimated\";\r\n\r\nimport { PFText } from \"..\";\r\n\r\nimport Colors from \"../../utils/globalColors\";\r\n\r\nexport const PFModalPrompt = ({\r\n    title, \r\n    message, \r\n    visible, \r\n    modalClose, \r\n    onConfirm, \r\n    type\r\n}) => {\r\n\r\n  const [modalVisible, setModalVisible] = useState(visible);\r\n\r\n    if(type == \"yesorno\" || type == null){\r\n        return (\r\n            <View style={styles.centeredView}>\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                // visible={modalVisible}\r\n                visible={visible}\r\n                onRequestClose={() => {\r\n                // Alert.alert(\"Modal has been closed.\");\r\n                modalClose()\r\n                }}\r\n            >\r\n                <View style={styles.centeredView}>\r\n                <View style={styles.modalView}>\r\n                    <PFText style={styles.modalTextTitle} weight={\"semi-bold\"}>{title}</PFText>\r\n                    <PFText style={styles.modalTextMessage}>{message}</PFText>\r\n                    <View style={styles.buttonArea}>\r\n                        <Pressable\r\n                            style={[styles.button, styles.buttonClose]}\r\n                            //   onPress={() => setModalVisible(false)}\r\n                            onPress={() => {onConfirm()}}\r\n                            //   onPress={() => {this.visible}}\r\n                        >\r\n                            <PFText style={styles.primaryButtonText} color={'white'}>YES</PFText>\r\n                        </Pressable>\r\n                        <Pressable\r\n                            style={[styles.button, styles.buttonClose]}\r\n                            //   onPress={() => setModalVisible(false)}\r\n                            onPress={() => {modalClose()}}\r\n                            //   onPress={() => {this.visible}}\r\n                        >\r\n                            <PFText style={styles.primaryButtonText} color={'white'}>NO</PFText>\r\n                        </Pressable>\r\n                    </View>\r\n                    \r\n                </View>\r\n                </View>\r\n            </Modal>\r\n\r\n            {/* <Modal visible={visible}>\r\n                <View>\r\n                    <Text>Hello world</Text>\r\n                </View>\r\n            </Modal> */}\r\n            </View>\r\n        );\r\n    }else if(type == \"confirm\"){\r\n        return (\r\n            <View style={styles.centeredView}>\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                // visible={modalVisible}\r\n                visible={visible}\r\n                onRequestClose={() => {\r\n                // Alert.alert(\"Modal has been closed.\");\r\n                modalClose()\r\n                }}\r\n            >\r\n                <View style={styles.centeredView}>\r\n                <View style={styles.modalView}>\r\n                    <PFText style={styles.modalTextTitle} weight={\"semi-bold\"}>{title}</PFText>\r\n                    <PFText style={styles.modalTextMessage}>{message}</PFText>\r\n                    <View style={styles.buttonArea}>\r\n                        <Pressable\r\n                            style={[styles.button, styles.buttonClose]}\r\n                            //   onPress={() => setModalVisible(false)}\r\n                            onPress={() => {modalClose()}}\r\n                            //   onPress={() => {this.visible}}\r\n                        >\r\n                            <PFText style={styles.primaryButtonText} color={'white'}>CANCEL</PFText>\r\n                        </Pressable>\r\n                        <Pressable\r\n                            style={[styles.button, styles.buttonClose]}\r\n                            //   onPress={() => setModalVisible(false)}\r\n                            onPress={() => {onConfirm()}}\r\n                            //   onPress={() => {this.visible}}\r\n                        >\r\n                            <PFText style={styles.primaryButtonText} color={'white'}>CONFIRM</PFText>\r\n                        </Pressable>\r\n                    </View>\r\n                    \r\n                </View>\r\n                </View>\r\n            </Modal>\r\n\r\n            {/* <Modal visible={visible}>\r\n                <View>\r\n                    <Text>Hello world</Text>\r\n                </View>\r\n            </Modal> */}\r\n            </View>\r\n        );\r\n    }\r\n\r\n  \r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: 22\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 8,\r\n    padding: 35,\r\n    alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 4,\r\n    elevation: 5\r\n  },\r\n  buttonArea: {\r\n    // flex: 1,\r\n    flexDirection: 'row'\r\n  },\r\n  button: {\r\n    borderRadius: 8,\r\n    padding: 10,\r\n    elevation: 2,\r\n    marginHorizontal: 10\r\n  },\r\n  buttonClose: {\r\n    backgroundColor: Colors.secondary,\r\n  },\r\n  primaryButtonText: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\"\r\n  },\r\n  modalTextTitl: {\r\n\r\n  },\r\n  modalTextMessage: {\r\n    marginBottom: 15,\r\n    textAlign: \"center\"\r\n  }\r\n});\r\n\r\n// export default PFModalPrompt;"]},"metadata":{},"sourceType":"module"}