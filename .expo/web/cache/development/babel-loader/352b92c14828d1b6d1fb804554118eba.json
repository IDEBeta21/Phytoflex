{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"android_ripple\", \"pressColor\", \"pressOpacity\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nvar ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\nexport default function PlatformPressable(_ref) {\n  var android_ripple = _ref.android_ripple,\n      _ref$pressColor = _ref.pressColor,\n      pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n      pressOpacity = _ref.pressOpacity,\n      _style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return React.createElement(Pressable, _extends({\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? _objectSpread({\n      color: pressColor\n    }, android_ripple) : undefined,\n    style: function style(_ref2) {\n      var pressed = _ref2.pressed;\n      return [{\n        opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1\n      }, typeof _style === 'function' ? _style({\n        pressed: pressed\n      }) : _style];\n    }\n  }, rest));\n}","map":{"version":3,"sources":["PlatformPressable.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","Platform","pressColor","rest","color","android_ripple","pressed","opacity","style"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AASA,IAAMA,wBAAwB,GAA9B,EAAA;AACA,IAAMC,uBAAuB,GAC3BC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAA6BA,QAAQ,CAARA,OAAAA,IAD/B,wBAAA;AAUA,eAAe,SAAA,iBAAA,OAML;AAAA,MANgC,cAMhC,QANgC,cAMhC;AAAA,6BAJRC,UAIQ;AAAA,MAJRA,UAIQ,gCANgC,oBAMhC;AAAA,MANgC,YAMhC,QANgC,YAMhC;AAAA,MANgC,MAMhC,QANgC,KAMhC;AAAA,MADLC,IACK;;AACR,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,IAAA,cAAc,EACZH,uBAAuB;AACjBI,MAAAA,KAAK,EAAP;AADmB,OACKC,cADL,IAF3B,SAAA;AAME,IAAA,KAAK,EAAE;AAAA,UAAGC,OAAH,SAAGA,OAAH;AAAA,aAAiB,CACtB;AAAEC,QAAAA,OAAO,EAAED,OAAO,IAAI,CAAXA,uBAAAA,GAAAA,YAAAA,GAAqD;AAAhE,OADsB,EAEtB,OAAA,MAAA,KAAA,UAAA,GAA8BE,MAAK,CAAC;AAAEF,QAAAA,OAAAA,EAAAA;AAAF,OAAD,CAAnC,GAFsB,MAAA,CAAjB;AAAA;AANT,GAAA,EADF,IACE,CAAA,CADF;AAcD","sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, PressableProps } from 'react-native';\n\nexport type Props = PressableProps & {\n  pressColor?: string;\n  pressOpacity?: number;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nexport default function PlatformPressable({\n  android_ripple,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  pressOpacity,\n  style,\n  ...rest\n}: Props) {\n  return (\n    <Pressable\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? { color: pressColor, ...android_ripple }\n          : undefined\n      }\n      style={({ pressed }) => [\n        { opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1 },\n        typeof style === 'function' ? style({ pressed }) : style,\n      ]}\n      {...rest}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}