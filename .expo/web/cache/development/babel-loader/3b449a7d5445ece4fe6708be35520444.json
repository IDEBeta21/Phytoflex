{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\xx\\\\Desktop\\\\Phytoflex\\\\screens\\\\plantcare\\\\snap\\\\camera\\\\plantCareCamera.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { Camera } from \"expo-camera\";\nimport firebase from \"firebase\";\nexport default function plantCareCamera() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      previewVisible = _useState4[0],\n      setPreviewVisible = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      capturedImage = _useState6[0],\n      setCapturedImage = _useState6[1];\n\n  var _useState7 = useState(Camera.Constants.Type.back),\n      _useState8 = _slicedToArray(_useState7, 2),\n      type = _useState8[0],\n      setType = _useState8[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  var takePicture = function takePicture() {\n    var photo;\n    return _regeneratorRuntime.async(function takePicture$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (camera) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(camera.takePictureAsync());\n\n          case 4:\n            photo = _context2.sent;\n            setPreviewVisible(true);\n            setCapturedImage(photo);\n            console.log(photo.uri);\n            uploadImageAsync(photo.uri);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function uploadImageAsync(uri) {\n    var blob;\n    return _regeneratorRuntime.async(function uploadImageAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var xhr = new XMLHttpRequest();\n\n              xhr.onload = function () {\n                resolve(xhr.response);\n              };\n\n              xhr.onerror = function (e) {\n                console.log(e);\n                reject(new TypeError(\"Network request failed\"));\n              };\n\n              xhr.responseType = \"blob\";\n              xhr.open(\"GET\", uri, true);\n              xhr.send(null);\n            }));\n\n          case 2:\n            blob = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(firebase.storage().ref().child('assets/img/plantCare/' + new Date().toString() + '.jpg').put(blob).then(function (res) {\n              console.log(res);\n            }));\n\n          case 5:\n            blob.close();\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, previewVisible ? React.createElement(ImageBackground, {\n    source: {\n      uri: capturedImage && capturedImage.uri\n    },\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: \"column\",\n      padding: 15,\n      justifyContent: \"flex-end\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setPreviewVisible(false);\n    },\n    style: {\n      width: 130,\n      height: 40,\n      alignItems: \"center\",\n      borderRadius: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"#fff\",\n      fontSize: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, \"Re-take\"), React.createElement(Pressable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }))))) : React.createElement(Camera, {\n    style: {\n      flex: 1\n    },\n    type: type,\n    ref: function ref(r) {\n      camera = r;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: \"transparent\",\n      flexDirection: \"row\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      position: \"absolute\",\n      top: \"5%\",\n      left: \"5%\"\n    },\n    onPress: function onPress() {\n      setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 20,\n      marginBottom: 10,\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 15\n    }\n  }, \" \", \"Flip\", \" \")), React.createElement(View, {\n    style: {\n      position: \"absolute\",\n      bottom: 0,\n      flexDirection: \"row\",\n      flex: 1,\n      width: \"100%\",\n      padding: 20,\n      justifyContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      alignSelf: \"center\",\n      flex: 1,\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 15\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: takePicture,\n    style: {\n      width: 70,\n      height: 70,\n      bottom: 0,\n      borderRadius: 50,\n      backgroundColor: \"#fff\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/xx/Desktop/Phytoflex/screens/plantcare/snap/camera/plantCareCamera.js"],"names":["React","useState","useEffect","Camera","firebase","plantCareCamera","hasPermission","setHasPermission","previewVisible","setPreviewVisible","capturedImage","setCapturedImage","Constants","Type","back","type","setType","requestPermissionsAsync","status","takePicture","camera","takePictureAsync","photo","console","log","uri","uploadImageAsync","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","e","TypeError","responseType","open","send","blob","storage","ref","child","Date","toString","put","then","res","close","flex","flexDirection","padding","justifyContent","width","height","alignItems","borderRadius","color","fontSize","r","backgroundColor","position","top","left","front","marginBottom","bottom","alignSelf"],"mappings":"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","sourcesContent":["// import { Text, StyleSheet, View, Dimensions, TouchableOpacity, Button, Image } from 'react-native'\r\n// import React, { Component, useState, useEffect} from 'react';\r\n// import { Camera } from 'expo-camera';\r\n// import { PFPrimaryButton } from '../../../../components';\r\n// import { set } from 'react-native-reanimated';\r\n\r\n// import firebase from 'firebase';\r\n\r\n//   // function takePicture(){\r\n//   //   if (camera) {\r\n//   //       // const options = {quality: 1, base64: true};\r\n//   //       const data = await this.camera.takePictureAsync(null);\r\n//   //       console.log(data);\r\n//   //       // this.camera.takePictureAsync(options).then((data) => {\r\n//   //       //   console.log(data);\r\n//   //       // })\r\n//   //   }\r\n//   // }\r\n\r\n// export default function PlantCareCamera ({navigation, route, }){\r\n//   const [hasPermission, setHasPermission] = useState(null);\r\n//   const [type, setType] = useState(Camera.Constants.Type.back);\r\n\r\n//   const [camera, setcamera] = useState(null)\r\n\r\n//   const [imageurl, setimageurl] = useState(null)\r\n\r\n//   const takePicture = async () => {\r\n//     if (camera) {\r\n//       const options = { quality: 0.5, base64: true };\r\n//       const data = await camera.takePictureAsync(options);\r\n//       console.log(data);\r\n//       setimageurl(data.uri);\r\n//       // firebase.storage().ref().child('assets/img/plantCare/image.jpg').put(data.uri).then((res) => {\r\n//       //   console.log(res);\r\n//       // });\r\n//       // const processed = await firebase.vision().imageLabelerProcessImage(data.uri, {\r\n//       //   confidenceThreshold: 0.8,\r\n//       // }).then();\r\n\r\n//       await firebase.vision().imageLabelerProcessImage(data.uri, {\r\n//         confidenceThreshold: 0.8,\r\n//       }).then((processed) => {\r\n//         firebase.storage().ref().child('assets/img/plantCare/image.jpg').put(processed).then((res) => {\r\n//           console.log(res);\r\n//         });\r\n//       });\r\n\r\n      \r\n//     }\r\n//   }\r\n//   useEffect(() => {\r\n//     (async () => {\r\n//       const { status } = await Camera.requestCameraPermissionsAsync();\r\n//       setHasPermission(status === 'granted');\r\n//     })();\r\n//   }, []);\r\n\r\n//   if (hasPermission === null) {\r\n//     return <View />;\r\n//   }\r\n//   if (hasPermission === false) {\r\n//     return <Text>No access to camera</Text>;\r\n//   }\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Camera style={styles.camera} type={type} \r\n//         // ref={ref => {\r\n//         //   this.camera = ref;\r\n//         // }}\r\n//         //   this.camera = ref;\r\n//         // }}\r\n//         ref={(ref) => setcamera(ref)}\r\n//       >\r\n//         <View style={styles.buttonContainer}>\r\n//           <TouchableOpacity\r\n//             style={styles.button}\r\n//             onPress={() => {\r\n//               setType(\r\n//                 type === Camera.Constants.Type.back\r\n//                   ? Camera.Constants.Type.front\r\n//                   : Camera.Constants.Type.back\r\n//               );\r\n//             }}>\r\n//             {/* <Text style={styles.text}> Flip {JSON.stringify(itemTitle)} </Text> */}\r\n//             <Text style={styles.text}> Flip </Text>\r\n//             <Text style={styles.text}> </Text>\r\n//           </TouchableOpacity>\r\n//         </View>\r\n//         <View style={{alignItems: 'center' }}>\r\n//           <View style={{alignItems: 'center', borderColor: 'white', borderWidth: 4, padding: 10, borderRadius: 49, marginBottom: 10}}>\r\n//             <TouchableOpacity style={styles.captureButton} onPress={() => takePicture()}>\r\n\r\n//             </TouchableOpacity>\r\n//           </View>\r\n//         </View>\r\n//       </Camera>\r\n\r\n//       <Image style={{width: 150, height: 150}} source={{ uri: imageurl }}></Image>\r\n\r\n      \r\n//     </View>\r\n//   );\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     backgroundColor: 'grey'\r\n//   },\r\n//   camera: {\r\n//     //flex: 1,\r\n//     width: Dimensions.get('window').width,\r\n//     height: Dimensions.get('window').width * (4/3)\r\n//   },\r\n//   buttonContainer: {\r\n//     flex: 1,\r\n//     backgroundColor: 'transparent',\r\n//     flexDirection: 'row',\r\n//     margin: 20,\r\n//   },\r\n//   button: {\r\n//     flex: 0.1,\r\n//     alignSelf: 'flex-end',\r\n//     alignItems: 'center',\r\n//   },\r\n//   text: {\r\n//     fontSize: 18,\r\n//     color: 'white',\r\n//   },\r\n//   captureButton:{\r\n//     width: 70, \r\n//     height: 70, \r\n//     backgroundColor: 'white', \r\n//     borderRadius: 35,\r\n//   },\r\n// })\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Text, View, TouchableOpacity, ImageBackground, Pressable } from \"react-native\";\r\nimport { Camera } from \"expo-camera\";\r\n// import { fireStorage } from \"../config/environment\";\\\r\nimport firebase from \"firebase\";\r\n\r\nexport default function plantCareCamera() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [previewVisible, setPreviewVisible] = useState(false);\r\n  const [capturedImage, setCapturedImage] = useState(null);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Camera.requestPermissionsAsync();\r\n      setHasPermission(status === \"granted\");\r\n    })();\r\n  }, []);\r\n\r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  const takePicture = async () => {\r\n    if (!camera) return;\r\n    let photo = await camera.takePictureAsync();\r\n    setPreviewVisible(true);\r\n    setCapturedImage(photo); // This code should work but doesn't, it always returns null\r\n    console.log(photo.uri);\r\n    // console.log(capturedImage);\r\n    // uploadImageAsync(photo.uri.toString());\r\n    uploadImageAsync(photo.uri);\r\n  };\r\n\r\n  async function uploadImageAsync(uri) {\r\n    const blob = await new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.onload = function () {\r\n        resolve(xhr.response);\r\n      };\r\n      xhr.onerror = function (e) {\r\n        console.log(e);\r\n        reject(new TypeError(\"Network request failed\"));\r\n      };\r\n      xhr.responseType = \"blob\";\r\n      xhr.open(\"GET\", uri, true);\r\n      xhr.send(null);\r\n    });\r\n\r\n    // const ref = \r\n    await firebase.storage().ref().child('assets/img/plantCare/' + new Date().toString() + '.jpg').put(blob)\r\n    .then((res) => {\r\n      console.log(res);\r\n    })\r\n    // const snapshot = await ref.put(blob);\r\n    blob.close();\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n      }}\r\n    >\r\n      {previewVisible ? (\r\n        <ImageBackground\r\n          source={{ uri: capturedImage && capturedImage.uri }}\r\n          style={{\r\n            flex: 1,\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              flex: 1,\r\n              flexDirection: \"column\",\r\n              padding: 15,\r\n              justifyContent: \"flex-end\",\r\n            }}\r\n          >\r\n            <View\r\n              style={{\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              <TouchableOpacity\r\n                onPress={() => setPreviewVisible(false)}\r\n                style={{\r\n                  width: 130,\r\n                  height: 40,\r\n\r\n                  alignItems: \"center\",\r\n                  borderRadius: 4,\r\n                }}\r\n              >\r\n                <Text\r\n                  style={{\r\n                    color: \"#fff\",\r\n                    fontSize: 20,\r\n                  }}\r\n                >\r\n                  Re-take\r\n                </Text>\r\n                <Pressable >\r\n                  \r\n                </Pressable>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n        </ImageBackground>\r\n      ) : (\r\n        <Camera\r\n          style={{ flex: 1 }}\r\n          type={type}\r\n          ref={(r) => {\r\n            camera = r;\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              flex: 1,\r\n              backgroundColor: \"transparent\",\r\n              flexDirection: \"row\",\r\n            }}\r\n          >\r\n            <TouchableOpacity\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"5%\",\r\n                left: \"5%\",\r\n              }}\r\n              onPress={() => {\r\n                setType(\r\n                  type === Camera.Constants.Type.back\r\n                    ? Camera.Constants.Type.front\r\n                    : Camera.Constants.Type.back\r\n                );\r\n              }}\r\n            >\r\n              <Text style={{ fontSize: 20, marginBottom: 10, color: \"white\" }}>\r\n                {\" \"}\r\n                Flip{\" \"}\r\n              </Text>\r\n            </TouchableOpacity>\r\n            <View\r\n              style={{\r\n                position: \"absolute\",\r\n                bottom: 0,\r\n                flexDirection: \"row\",\r\n                flex: 1,\r\n                width: \"100%\",\r\n                padding: 20,\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              <View\r\n                style={{\r\n                  alignSelf: \"center\",\r\n                  flex: 1,\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <TouchableOpacity\r\n                  onPress={takePicture}\r\n                  style={{\r\n                    width: 70,\r\n                    height: 70,\r\n                    bottom: 0,\r\n                    borderRadius: 50,\r\n                    backgroundColor: \"#fff\",\r\n                  }}\r\n                />\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </Camera>\r\n      )}\r\n    </View>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}