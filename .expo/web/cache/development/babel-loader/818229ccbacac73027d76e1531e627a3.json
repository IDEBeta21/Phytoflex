{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\xx\\\\Desktop\\\\Phytoflex\\\\node_modules\\\\react-native-image-slider\\\\ImageSlider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nvar reactNativePackage = require('react-native/package.json');\n\nvar splitVersion = reactNativePackage.version.split('.');\nvar majorVersion = +splitVersion[0];\nvar minorVersion = +splitVersion[1];\n\nvar ImageSlider = function (_Component) {\n  _inherits(ImageSlider, _Component);\n\n  var _super = _createSuper(ImageSlider);\n\n  function ImageSlider() {\n    var _this;\n\n    _classCallCheck(this, ImageSlider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      position: 0,\n      width: Dimensions.get('window').width,\n      onPositionChangedCalled: false,\n      interval: null\n    };\n    _this._ref = null;\n    _this._panResponder = {};\n\n    _this._onRef = function (ref) {\n      _this._ref = ref;\n\n      if (ref && _this.state.position !== _this._getPosition()) {\n        _this._move(_this._getPosition());\n      }\n    };\n\n    _this._popHelperView = function () {\n      return !_this.props.loopBothSides && _this._getPosition() === 0 && React.createElement(View, {\n        style: {\n          position: 'absolute',\n          width: 50,\n          height: '100%'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this._move = function (index) {\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var isUpdating = index !== _this._getPosition();\n\n      var x = Dimensions.get('window').width * index;\n      _this._ref && _this._ref.scrollTo({\n        y: 0,\n        x: x,\n        animated: animated\n      });\n\n      _this.setState({\n        position: index\n      });\n\n      if (isUpdating && _this.props.onPositionChanged && index < _this.props.images.length && index > -1) {\n        _this.props.onPositionChanged(index);\n\n        _this.setState({\n          onPositionChangedCalled: true\n        });\n      }\n\n      _this._setInterval();\n    };\n\n    _this._clearInterval = function () {\n      return _this.state.interval && clearInterval(_this.state.interval);\n    };\n\n    _this._setInterval = function () {\n      _this._clearInterval();\n\n      var _this$props = _this.props,\n          autoPlayWithInterval = _this$props.autoPlayWithInterval,\n          images = _this$props.images,\n          loop = _this$props.loop,\n          loopBothSides = _this$props.loopBothSides;\n\n      if (autoPlayWithInterval) {\n        _this.setState({\n          interval: setInterval(function () {\n            return _this._move(!(loop || loopBothSides) && _this.state.position === images.length - 1 ? 0 : _this.state.position + 1);\n          }, autoPlayWithInterval)\n        });\n      }\n    };\n\n    _this._handleScroll = function (event) {\n      var _this$state = _this.state,\n          position = _this$state.position,\n          width = _this$state.width;\n      var _this$props2 = _this.props,\n          loop = _this$props2.loop,\n          loopBothSides = _this$props2.loopBothSides,\n          images = _this$props2.images,\n          onPositionChanged = _this$props2.onPositionChanged;\n      var x = event.nativeEvent.contentOffset.x;\n\n      if ((loop || loopBothSides) && x.toFixed() >= +(width * images.length).toFixed()) {\n        return _this._move(0, false);\n      } else if (loopBothSides && x.toFixed() <= +(-width).toFixed()) {\n        return _this._move(images.length - 1, false);\n      }\n\n      var newPosition = 0;\n\n      if (position !== -1 && position !== images.length) {\n        newPosition = Math.round(event.nativeEvent.contentOffset.x / width);\n\n        _this.setState({\n          position: newPosition\n        });\n      }\n\n      if (onPositionChanged && !_this.state.onPositionChangedCalled && newPosition < images.length && newPosition > -1) {\n        onPositionChanged(newPosition);\n      } else {\n        _this.setState({\n          onPositionChangedCalled: false\n        });\n      }\n\n      _this._setInterval();\n    };\n\n    _this._onLayout = function () {\n      _this.setState({\n        width: Dimensions.get('window').width\n      });\n\n      _this._move(_this.state.position, false);\n    };\n\n    _this._renderImage = function (image, index) {\n      var _Dimensions$get = Dimensions.get('window'),\n          width = _Dimensions$get.width;\n\n      var _this$props3 = _this.props,\n          _onPress = _this$props3.onPress,\n          customSlide = _this$props3.customSlide;\n      var offset = {\n        marginLeft: index === -1 ? -width : 0\n      };\n      var imageStyle = [styles.image, {\n        width: width\n      }, offset];\n\n      if (customSlide) {\n        return customSlide({\n          item: image,\n          style: imageStyle,\n          index: index,\n          width: width\n        });\n      }\n\n      var imageObject = typeof image === 'string' ? {\n        uri: image\n      } : image;\n      var imageComponent = React.createElement(Image, {\n        key: index,\n        source: imageObject,\n        style: [imageStyle],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 7\n        }\n      });\n\n      if (_onPress) {\n        return React.createElement(TouchableOpacity, {\n          key: index,\n          style: [imageStyle, offset],\n          onPress: function onPress() {\n            return _onPress && _onPress({\n              image: image,\n              index: index\n            });\n          },\n          delayPressIn: 200,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 9\n          }\n        }, imageComponent);\n      }\n\n      return imageComponent;\n    };\n\n    _this._scrollEnabled = function (position) {\n      return position !== -1 && position !== _this.props.images.length;\n    };\n\n    return _this;\n  }\n\n  _createClass(ImageSlider, [{\n    key: \"_getPosition\",\n    value: function _getPosition() {\n      if (typeof this.props.position === 'number') {\n        return this.props.position;\n      }\n\n      return this.state.position;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var position = this.props.position;\n\n      if (position && prevProps.position !== position) {\n        this._move(position);\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._setInterval();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._clearInterval();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          onPress = _this$props4.onPress,\n          customButtons = _this$props4.customButtons,\n          style = _this$props4.style,\n          loop = _this$props4.loop,\n          images = _this$props4.images,\n          loopBothSides = _this$props4.loopBothSides;\n\n      var position = this._getPosition();\n\n      var scrollEnabled = this._scrollEnabled(position);\n\n      return React.createElement(View, {\n        style: [styles.container, style],\n        onLayout: this._onLayout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 7\n        }\n      }, React.createElement(ScrollView, {\n        onLayout: this._onLayout,\n        ref: function ref(_ref) {\n          return _this2._onRef(_ref);\n        },\n        onMomentumScrollEnd: this._handleScroll,\n        scrollEventThrottle: 16,\n        pagingEnabled: true,\n        bounces: loopBothSides,\n        contentInset: loopBothSides ? {\n          left: this.state.width\n        } : {},\n        horizontal: true,\n        scrollEnabled: scrollEnabled,\n        showsHorizontalScrollIndicator: false,\n        style: [styles.scrollViewContainer, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      }, loopBothSides && this._renderImage(images[images.length - 1], -1), images.map(this._renderImage), (loop || loopBothSides) && this._renderImage(images[0], images.length)), customButtons ? customButtons(position, this._move) : React.createElement(View, {\n        style: styles.buttons,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }\n      }, this.props.images.map(function (image, index) {\n        return React.createElement(TouchableHighlight, {\n          key: index,\n          underlayColor: \"#ccc\",\n          onPress: function onPress() {\n            return _this2._move(index);\n          },\n          style: [styles.button, position === index && styles.buttonSelected],\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }\n        }, React.createElement(View, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }\n        }));\n      })), this._popHelperView());\n    }\n  }]);\n\n  return ImageSlider;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scrollViewContainer: {\n    flexDirection: 'row',\n    backgroundColor: '#222'\n  },\n  image: {\n    width: 200,\n    height: '100%'\n  },\n  buttons: {\n    height: 15,\n    marginTop: -25,\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  button: {\n    margin: 3,\n    width: 8,\n    height: 8,\n    borderRadius: 8 / 2,\n    backgroundColor: '#ccc',\n    opacity: 0.9\n  },\n  buttonSelected: {\n    opacity: 1,\n    backgroundColor: '#fff'\n  }\n});\nexport default ImageSlider;","map":{"version":3,"sources":["C:/Users/xx/Desktop/Phytoflex/node_modules/react-native-image-slider/ImageSlider.js"],"names":["React","Component","reactNativePackage","require","splitVersion","version","split","majorVersion","minorVersion","ImageSlider","state","position","width","Dimensions","get","onPositionChangedCalled","interval","_ref","_panResponder","_onRef","ref","_getPosition","_move","_popHelperView","props","loopBothSides","height","index","animated","isUpdating","x","scrollTo","y","setState","onPositionChanged","images","length","_setInterval","_clearInterval","clearInterval","autoPlayWithInterval","loop","setInterval","_handleScroll","event","nativeEvent","contentOffset","toFixed","newPosition","Math","round","_onLayout","_renderImage","image","onPress","customSlide","offset","marginLeft","imageStyle","styles","item","style","imageObject","uri","imageComponent","_scrollEnabled","prevProps","customButtons","scrollEnabled","container","left","scrollViewContainer","map","buttons","button","buttonSelected","StyleSheet","create","flex","flexDirection","backgroundColor","marginTop","marginBottom","justifyContent","alignItems","margin","borderRadius","opacity"],"mappings":"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","sourcesContent":["// @flow\r\n\r\nimport React, { type Node, Component } from 'react';\r\nimport {\r\n  Image,\r\n  View,\r\n  ScrollView,\r\n  StyleSheet,\r\n  TouchableHighlight,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n} from 'react-native';\r\n\r\nconst reactNativePackage = require('react-native/package.json');\r\nconst splitVersion = reactNativePackage.version.split('.');\r\nconst majorVersion = +splitVersion[0];\r\nconst minorVersion = +splitVersion[1];\r\n\r\ntype Slide = {\r\n  index: number,\r\n  style?: any,\r\n  width?: number,\r\n  item?: any,\r\n};\r\n\r\ntype PropsType = {\r\n  images: string[],\r\n  style?: any,\r\n  loop?: boolean,\r\n  loopBothSides?: boolean,\r\n  autoPlayWithInterval?: number,\r\n  position?: number,\r\n  onPositionChanged?: number => void,\r\n  onPress?: Object => void,\r\n  customButtons?: (number, (number, animated?: boolean) => void) => Node,\r\n  customSlide?: Slide => Node,\r\n};\r\n\r\ntype StateType = {\r\n  position: number,\r\n  width: number,\r\n  interval: any,\r\n  onPositionChangedCalled: boolean,\r\n};\r\n\r\nclass ImageSlider extends Component<PropsType, StateType> {\r\n  state = {\r\n    position: 0,\r\n    width: Dimensions.get('window').width,\r\n    onPositionChangedCalled: false,\r\n    interval: null,\r\n  };\r\n\r\n  _ref = null;\r\n  _panResponder = {};\r\n\r\n  _onRef = (ref: any) => {\r\n    this._ref = ref;\r\n    if (ref && this.state.position !== this._getPosition()) {\r\n      this._move(this._getPosition());\r\n    }\r\n  };\r\n\r\n  // In iOS you can pop view by swiping left, with active ScrollView\r\n  // you can't do that. This View on top of ScrollView enables call of\r\n  // pop function.\r\n  _popHelperView = () =>\r\n    !this.props.loopBothSides &&\r\n    this._getPosition() === 0 && (\r\n      <View style={{ position: 'absolute', width: 50, height: '100%' }} />\r\n    );\r\n\r\n  _move = (index: number, animated: boolean = true) => {\r\n    const isUpdating = index !== this._getPosition();\r\n    const x = Dimensions.get('window').width * index;\r\n\r\n    this._ref && this._ref.scrollTo({ y: 0, x, animated });\r\n\r\n    this.setState({ position: index });\r\n\r\n    if (\r\n      isUpdating &&\r\n      this.props.onPositionChanged &&\r\n      index < this.props.images.length &&\r\n      index > -1\r\n    ) {\r\n      this.props.onPositionChanged(index);\r\n      this.setState({ onPositionChangedCalled: true });\r\n    }\r\n\r\n    this._setInterval();\r\n  };\r\n\r\n  _getPosition() {\r\n    if (typeof this.props.position === 'number') {\r\n      return this.props.position;\r\n    }\r\n    return this.state.position;\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Object) {\r\n    const { position } = this.props;\r\n\r\n    if (position && prevProps.position !== position) {\r\n      this._move(position);\r\n    }\r\n  }\r\n\r\n  _clearInterval = () =>\r\n    this.state.interval && clearInterval(this.state.interval);\r\n\r\n  _setInterval = () => {\r\n    this._clearInterval();\r\n    const { autoPlayWithInterval, images, loop, loopBothSides } = this.props;\r\n\r\n    if (autoPlayWithInterval) {\r\n      this.setState({\r\n        interval: setInterval(\r\n          () =>\r\n            this._move(\r\n              !(loop || loopBothSides) &&\r\n              this.state.position === images.length - 1\r\n                ? 0\r\n                : this.state.position + 1,\r\n            ),\r\n          autoPlayWithInterval,\r\n        ),\r\n      });\r\n    }\r\n  };\r\n\r\n  _handleScroll = (event: Object) => {\r\n    const { position, width } = this.state;\r\n    const { loop, loopBothSides, images, onPositionChanged } = this.props;\r\n    const { x } = event.nativeEvent.contentOffset;\r\n\r\n    if (\r\n      (loop || loopBothSides) &&\r\n      x.toFixed() >= +(width * images.length).toFixed()\r\n    ) {\r\n      return this._move(0, false);\r\n    } else if (loopBothSides && x.toFixed() <= +(-width).toFixed()) {\r\n      return this._move(images.length - 1, false);\r\n    }\r\n\r\n    let newPosition = 0;\r\n\r\n    if (position !== -1 && position !== images.length) {\r\n      newPosition = Math.round(event.nativeEvent.contentOffset.x / width);\r\n      this.setState({ position: newPosition });\r\n    }\r\n\r\n    if (\r\n      onPositionChanged &&\r\n      !this.state.onPositionChangedCalled &&\r\n      newPosition < images.length &&\r\n      newPosition > -1\r\n    ) {\r\n      onPositionChanged(newPosition);\r\n    } else {\r\n      this.setState({ onPositionChangedCalled: false });\r\n    }\r\n\r\n    this._setInterval();\r\n  };\r\n\r\n  componentWillMount() {\r\n    this._setInterval();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._clearInterval();\r\n  }\r\n\r\n  _onLayout = () => {\r\n    this.setState({ width: Dimensions.get('window').width });\r\n    this._move(this.state.position, false);\r\n  };\r\n\r\n  _renderImage = (image: any, index: number) => {\r\n    const { width } = Dimensions.get('window');\r\n    const { onPress, customSlide } = this.props;\r\n    const offset = { marginLeft: index === -1 ? -width : 0 };\r\n    const imageStyle = [styles.image, { width }, offset];\r\n\r\n    if (customSlide) {\r\n      return customSlide({ item: image, style: imageStyle, index, width });\r\n    }\r\n\r\n    const imageObject = typeof image === 'string' ? { uri: image } : image;\r\n\r\n    const imageComponent = (\r\n      <Image key={index} source={imageObject} style={[imageStyle]} />\r\n    );\r\n\r\n    if (onPress) {\r\n      return (\r\n        <TouchableOpacity\r\n          key={index}\r\n          style={[imageStyle, offset]}\r\n          onPress={() => onPress && onPress({ image, index })}\r\n          delayPressIn={200}\r\n        >\r\n          {imageComponent}\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n\r\n    return imageComponent;\r\n  };\r\n\r\n  // We make shure, that, when loop is active,\r\n  // fake images at the begin and at the end of ScrollView\r\n  // do not scroll.\r\n  _scrollEnabled = (position: number) =>\r\n    position !== -1 && position !== this.props.images.length;\r\n\r\n  render() {\r\n    const {\r\n      onPress,\r\n      customButtons,\r\n      style,\r\n      loop,\r\n      images,\r\n      loopBothSides,\r\n    } = this.props;\r\n    const position = this._getPosition();\r\n    const scrollEnabled = this._scrollEnabled(position);\r\n\r\n    return (\r\n      <View style={[styles.container, style]} onLayout={this._onLayout}>\r\n        <ScrollView\r\n          onLayout={this._onLayout}\r\n          ref={ref => this._onRef(ref)}\r\n          onMomentumScrollEnd={this._handleScroll}\r\n          scrollEventThrottle={16}\r\n          pagingEnabled={true}\r\n          bounces={loopBothSides}\r\n          contentInset={loopBothSides ? { left: this.state.width } : {}}\r\n          horizontal={true}\r\n          scrollEnabled={scrollEnabled}\r\n          showsHorizontalScrollIndicator={false}\r\n          style={[styles.scrollViewContainer, style]}\r\n        >\r\n          {loopBothSides && this._renderImage(images[images.length - 1], -1)}\r\n          {images.map(this._renderImage)}\r\n          {(loop || loopBothSides) &&\r\n            this._renderImage(images[0], images.length)}\r\n        </ScrollView>\r\n        {customButtons ? (\r\n          customButtons(position, this._move)\r\n        ) : (\r\n          <View style={styles.buttons}>\r\n            {this.props.images.map((image, index) => (\r\n              <TouchableHighlight\r\n                key={index}\r\n                underlayColor=\"#ccc\"\r\n                onPress={() => this._move(index)}\r\n                style={[\r\n                  styles.button,\r\n                  position === index && styles.buttonSelected,\r\n                ]}\r\n              >\r\n                <View />\r\n              </TouchableHighlight>\r\n            ))}\r\n          </View>\r\n        )}\r\n        {this._popHelperView()}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  scrollViewContainer: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#222',\r\n  },\r\n  image: {\r\n    width: 200,\r\n    height: '100%',\r\n  },\r\n  buttons: {\r\n    height: 15,\r\n    marginTop: -25,\r\n    marginBottom: 10,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n  },\r\n  button: {\r\n    margin: 3,\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: 8 / 2,\r\n    backgroundColor: '#ccc',\r\n    opacity: 0.9,\r\n  },\r\n  buttonSelected: {\r\n    opacity: 1,\r\n    backgroundColor: '#fff',\r\n  },\r\n});\r\n\r\nexport default ImageSlider;\r\n"]},"metadata":{},"sourceType":"module"}