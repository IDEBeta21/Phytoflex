{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\xx\\\\Desktop\\\\Phytoflex\\\\components\\\\FlatList\\\\Item\\\\MyGardenItem.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { Component, useState, useEffect } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { PFText } from \"../../PFText\";\nimport Colors from \"../../../utils/globalColors\";\nimport firebase from 'firebase';\n\nvar LeftContent = function LeftContent(props) {\n  return React.createElement(Avatar.Icon, _extends({}, props, {\n    icon: \"folder\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 30\n    }\n  }));\n};\n\nexport var MyGardenItem = function MyGardenItem(_ref) {\n  var imageURL = _ref.imageURL,\n      description = _ref.description,\n      _ref$onPress = _ref.onPress,\n      _onPress = _ref$onPress === void 0 ? function () {} : _ref$onPress,\n      style = _ref.style,\n      cardContentStyle = _ref.cardContentStyle;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setimage = _useState2[1];\n\n  firebase.storage().ref().child(imageURL).getDownloadURL().then(function (url) {\n    setimage(url);\n  });\n  return React.createElement(View, {\n    style: _objectSpread(_objectSpread({}, styles.cardContainer), style),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, React.createElement(Card, {\n    stye: {\n      flex: 1\n    },\n    onPress: function onPress() {\n      return _onPress();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, React.createElement(Card.Cover, {\n    source: {\n      uri: image\n    },\n    style: {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }), React.createElement(Card.Content, {\n    style: _objectSpread(_objectSpread({}, styles.cardContent), cardContentStyle),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, React.createElement(PFText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, description))));\n};\nvar styles = StyleSheet.create({\n  cardContainer: {\n    marginLeft: 8,\n    width: Dimensions.get('window').width / 2 * 0.93\n  },\n  cardContent: {\n    paddingTop: 10,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    borderBottomLeftRadius: 10,\n    borderBottomRightRadius: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/xx/Desktop/Phytoflex/components/FlatList/Item/MyGardenItem.js"],"names":["React","Component","useState","useEffect","Avatar","Button","Card","Title","Paragraph","PFText","Colors","firebase","LeftContent","props","MyGardenItem","imageURL","description","onPress","style","cardContentStyle","image","setimage","storage","ref","child","getDownloadURL","then","url","styles","cardContainer","flex","uri","cardContent","StyleSheet","create","marginLeft","width","Dimensions","get","paddingTop","borderWidth","borderColor","primary","borderBottomLeftRadius","borderBottomRightRadius"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,SAApC,QAAoD,OAApD;;AAEA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,SAAtC,QAAuD,oBAAvD;;;AAIA,SAASC,MAAT;AACA,OAAOC,MAAP;AAEA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK;AAAA,SAAI,oBAAC,MAAD,CAAQ,IAAR,eAAiBA,KAAjB;AAAwB,IAAA,IAAI,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;AAAA,CAAzB;;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAKJ;AAAA,MAJtBC,QAIsB,QAJtBA,QAIsB;AAAA,MAHtBC,WAGsB,QAHtBA,WAGsB;AAAA,0BAFtBC,OAEsB;AAAA,MAFtBA,QAEsB,6BAFZ,YAAM,CAAE,CAEI;AAAA,MADtBC,KACsB,QADtBA,KACsB;AAAA,MAAtBC,gBAAsB,QAAtBA,gBAAsB;;AAEpB,kBAA0BjB,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOkB,KAAP;AAAA,MAAcC,QAAd;;AAEAV,EAAAA,QAAQ,CAACW,OAAT,GAAmBC,GAAnB,GAAyBC,KAAzB,CAA+BT,QAA/B,EAAyCU,cAAzC,GAA0DC,IAA1D,CAA+D,UAACC,GAAD,EAAS;AACtEN,IAAAA,QAAQ,CAACM,GAAD,CAAR;AACD,GAFD;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,kCAAMC,MAAM,CAACC,aAAb,GAA+BX,KAA/B,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAACY,MAAAA,IAAI,EAAE;AAAP,KAAZ;AAAuB,IAAA,OAAO,EAAE;AAAA,aAAMb,QAAO,EAAb;AAAA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,MAAM,EAAE;AAAEc,MAAAA,GAAG,EAAEX;AAAP,KADV;AAEE,IAAA,KAAK,EAAE,EAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAQE,oBAAC,IAAD,CAAM,OAAN;AAAc,IAAA,KAAK,kCAAMQ,MAAM,CAACI,WAAb,GAA6Bb,gBAA7B,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASH,WAAT,CADF,CARF,CADF,CADF;AAiBD,CA9BI;AAgCP,IAAMY,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,aAAa,EAAE;AACbM,IAAAA,UAAU,EAAE,CADC;AAEbC,IAAAA,KAAK,EAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAzB,GAA+B,CAAhC,GAAqC;AAF/B,GADgB;AAK/BJ,EAAAA,WAAW,EAAE;AACXO,IAAAA,UAAU,EAAE,EADD;AAEXC,IAAAA,WAAW,EAAE,CAFF;AAGXC,IAAAA,WAAW,EAAE/B,MAAM,CAACgC,OAHT;AAIXC,IAAAA,sBAAsB,EAAE,EAJb;AAKXC,IAAAA,uBAAuB,EAAE;AALd;AALkB,CAAlB,CAAf","sourcesContent":["import React, {Component, useState, useEffect} from 'react';\r\nimport { Dimensions } from 'react-native';\r\nimport { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\r\nimport { View, StyleSheet } from 'react-native';\r\n// import { PFText } from '../PFText';\r\n// import Colors from '../../utils/globalColors';\r\nimport { PFText } from '../../PFText'\r\nimport Colors from '../../../utils/globalColors'\r\n\r\nimport firebase from 'firebase';\r\n\r\nconst LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\r\n\r\nexport const MyGardenItem = ({\r\n  imageURL, \r\n  description, \r\n  onPress = () => {}, \r\n  style, \r\n  cardContentStyle}) => {\r\n    \r\n    const [image, setimage] = useState(null)\r\n\r\n    firebase.storage().ref().child(imageURL).getDownloadURL().then((url) => {\r\n      setimage(url);\r\n    })\r\n\r\n    return(\r\n      <View style={{...styles.cardContainer, ...style}}>\r\n        <Card stye={{flex: 1}} onPress={() => onPress()}>\r\n          \r\n          <Card.Cover \r\n            source={{ uri: image }} \r\n            style={{\r\n\r\n            }}\r\n          />\r\n          <Card.Content style={{...styles.cardContent, ...cardContentStyle}}>\r\n            <PFText>{description}</PFText>  \r\n          </Card.Content>\r\n          \r\n        </Card>\r\n      </View>\r\n    );\r\n  }\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    marginLeft: 8, \r\n    width: (Dimensions.get('window').width/2) * 0.93\r\n  },\r\n  cardContent: {\r\n    paddingTop: 10,\r\n    borderWidth: 1, \r\n    borderColor: Colors.primary, \r\n    borderBottomLeftRadius: 10, \r\n    borderBottomRightRadius: 10\r\n  },\r\n})"]},"metadata":{},"sourceType":"module"}